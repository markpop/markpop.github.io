<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[特首的前端日志]]></title>
  <subtitle><![CDATA[我不是大神，可我是要成为大神的男人]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-01-26T15:00:19.112Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[特首]]></name>
    <email><![CDATA[markpopjason@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Swift学习笔记]]></title>
    <link href="http://yoursite.com/2015/01/26/Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2015/01/26/Swift学习笔记/</id>
    <published>2015-01-26T14:55:23.000Z</published>
    <updated>2015-01-26T14:57:33.000Z</updated>
    <content type="html"><![CDATA[<h1 id="基础部分">基础部分</h1>
<h2 id="常量与变量">常量与变量</h2>
<ul>
<li>let（常量）</li>
<li>var（变量）</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">0.0</span>, y = <span class="number">0.0</span>, z = <span class="number">0.0</span> <span class="comment">// 一行声明多个变量</span></div><div class="line"><span class="keyword">var</span> msg: <span class="type">String</span> <span class="comment">// 标注类型</span></div><div class="line"><span class="built_in">println</span>(<span class="string">"my name is <span class="subst">\(name)</span>"</span>) <span class="comment">// 字符串插值</span></div></pre></td></tr></table></figure>

<h2 id="注释">注释</h2>
<ul>
<li>单行注释</li>
<li>多行注释</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这是一个注释</span></div><div class="line"><span class="comment">/* 这是一个</span></div><div class="line">多行注释 */</div></pre></td></tr></table></figure>

<h2 id="数据类型">数据类型</h2>
<ul>
<li>整型<ul>
<li>Int（有符号，32位平台为Int32，64位平台为Int64）<ul>
<li>Int8</li>
<li>Int16</li>
<li>Int32</li>
<li>Int64</li>
</ul>
</li>
<li>UInt（无符号，32位平台为UInt32，64位平台为UInt64）<ul>
<li>UInt8</li>
<li>UInt16</li>
<li>UInt32</li>
<li>UInt64</li>
</ul>
</li>
</ul>
</li>
<li>浮点型<ul>
<li>Double（64位，15位数字）</li>
<li>Float（32位，6位数字）</li>
</ul>
</li>
<li>布尔型<ul>
<li>true</li>
<li>false</li>
</ul>
</li>
<li>元组</li>
<li>nil</li>
</ul>
<h3 id="整数">整数</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> minValue = <span class="type">UInt8</span>.<span class="built_in">min</span> <span class="comment">// minValue为0</span></div><div class="line"><span class="keyword">let</span> maxValue = <span class="type">UInt8</span>.<span class="built_in">max</span> <span class="comment">// maxValue为255</span></div></pre></td></tr></table></figure>

<h3 id="浮点型">浮点型</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> pi = <span class="number">3.14159</span> <span class="comment">// pi会被推测为Double类型</span></div></pre></td></tr></table></figure>

<h3 id="元组">元组</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">let http404Error = (<span class="number">404</span>, <span class="string">"Not Found"</span>)</div><div class="line">let (statusCode, statusMessage) = http404Error</div><div class="line">println(statusCode<span class="string">") // 404</span></div><div class="line">println(statusMessage) <span class="comment">// Not Found</span></div><div class="line"><span class="comment">// 只需一部分，用下划线（_）代替</span></div><div class="line">let (justTheStatusCode, _) = http404Error</div><div class="line"><span class="comment">// 访问单个元素</span></div><div class="line">println(http404Error.<span class="number">0</span>) <span class="comment">// 404</span></div><div class="line">println(http404Error.<span class="number">1</span>) <span class="comment">// Not Found</span></div><div class="line"><span class="comment">// 给单个元素命名</span></div><div class="line">let http200Status = (statusCode: <span class="number">200</span>, description: <span class="string">"OK"</span>)</div><div class="line">println(http200Status.statusCode) <span class="comment">// 200</span></div><div class="line">println(http200Status.description) <span class="comment">// OK</span></div></pre></td></tr></table></figure>

<h3 id="数值型字面量">数值型字面量</h3>
<ul>
<li>十进制（没有前缀）</li>
<li>二进制（0b）</li>
<li>八进制（0o）</li>
<li>十六进制（0x）</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.25e2</span> <span class="comment">// 表示1.25x10^2</span></div><div class="line"><span class="number">1.25e-2</span> <span class="comment">// 表示1.25x10^-2</span></div><div class="line"><span class="number">0xF</span>p2 <span class="comment">// 表示15x2^2</span></div><div class="line"><span class="number">0xF</span>p-<span class="number">2</span> <span class="comment">// 表示15x2^-2</span></div><div class="line">lef oneMillion = <span class="number">1</span>_000_000 <span class="comment">// 整数和浮点数都可以加_来增强可读性</span></div></pre></td></tr></table></figure>

<h3 id="数值类型转化">数值类型转化</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 整型转化</div><div class="line"><span class="keyword">let</span> one: <span class="variable">UInt8 =</span> <span class="number">1</span></div><div class="line"><span class="keyword">let</span> two: <span class="variable">UInt16 =</span> UInt16(one)</div><div class="line">// 整型转浮点型</div><div class="line">lef <span class="variable">i =</span> <span class="number">3</span></div><div class="line"><span class="keyword">let</span> <span class="variable">d =</span> Double(i)</div><div class="line">// 浮点型转整型</div><div class="line"><span class="keyword">let</span> <span class="variable">pi =</span> <span class="number">3.14</span></div><div class="line"><span class="keyword">let</span> <span class="variable">three =</span> Int(pi) // 浮点值会被截断</div></pre></td></tr></table></figure>

<h3 id="类型别名">类型别名</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> <span class="type">AudioSample</span> = <span class="type">UInt16</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">min</span> = <span class="type">AudioSample</span>.<span class="built_in">min</span> <span class="comment">// min为0</span></div></pre></td></tr></table></figure>

<h3 id="可选类型">可选类型</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// option为可选类型</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">const</span> = option {</div><div class="line">  <span class="comment">// code</span></div><div class="line">}</div><div class="line"><span class="comment">// 可选（?）和隐式可选（!）的区别</span></div><div class="line"><span class="keyword">let</span> h: <span class="built_in">String</span>? = <span class="string">"hello"</span></div><div class="line">println(h!)</div><div class="line"><span class="keyword">let</span> w: <span class="built_in">String</span>! = <span class="string">"world"</span></div><div class="line">print(w)</div></pre></td></tr></table></figure>

<h2 id="调试">调试</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="variable">age =</span> -<span class="number">3</span></div><div class="line"><span class="keyword">assert</span>(age &gt;= <span class="number">0</span>, <span class="string">"cannot be less than zero"</span>) // 条件为<span class="constant">false</span>程序终止</div></pre></td></tr></table></figure>

<h1 id="基本运算符">基本运算符</h1>
<ul>
<li>赋值运算（=）</li>
<li>算数运算<ul>
<li>加法（+）</li>
<li>减法（-）</li>
<li>乘法（*）</li>
<li>除法（/）</li>
<li>求余（%）</li>
</ul>
</li>
<li>自增和自减运算<ul>
<li>自增（++）</li>
<li>自减（—）</li>
</ul>
</li>
<li>复合赋值（+=）</li>
<li>比较运算<ul>
<li>等于（==）</li>
<li>不等（!=）</li>
<li>大于（&gt;）</li>
<li>小于（&lt;）</li>
<li>大于等于（&gt;=）</li>
<li>小于等于（&lt;=）</li>
</ul>
</li>
<li>三目运算（bool?a:b）</li>
<li>空合运算（a??b）</li>
<li>区间运算<ul>
<li>闭区间（…）</li>
<li>半开区间（..&lt;）</li>
</ul>
</li>
<li>逻辑运算<ul>
<li>逻辑非（!a）</li>
<li>逻辑与（a&amp;&amp;b）</li>
<li>逻辑或（a||b）</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 赋值</span></div><div class="line"><span class="keyword">let</span> (x, y) = (<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="comment">// 求余</span></div><div class="line"><span class="number">8</span> % <span class="number">2.5</span> <span class="comment">// 等于0.5</span></div><div class="line"><span class="comment">// 空合运算</span></div><div class="line"><span class="keyword">var</span> b = <span class="built_in">nil</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">c</span> = <span class="string">"not nil"</span></div><div class="line"><span class="keyword">var</span> a = b ?? <span class="built_in">c</span> <span class="comment">// not nil</span></div><div class="line"><span class="comment">// 闭区间</span></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">1</span>...<span class="number">5</span> {</div><div class="line">  <span class="built_in">println</span>(index) <span class="comment">// index为1~5</span></div><div class="line">} </div><div class="line"><span class="comment">// 半开区间</span></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">4</span> {</div><div class="line">  <span class="built_in">print</span>(index) <span class="comment">// index为0~3</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="字符串和字符">字符串和字符</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字面量</span></div><div class="line"><span class="keyword">let</span> dollarSign: <span class="type">Character</span> = <span class="string">"\u{24}"</span></div><div class="line"><span class="comment">// 初始化空字符串</span></div><div class="line"><span class="keyword">var</span> empty = <span class="string">""</span></div><div class="line"><span class="keyword">var</span> anotherEmpty = <span class="type">String</span>()</div><div class="line"><span class="comment">// 判断是否为空</span></div><div class="line"><span class="keyword">if</span> empty.isEmpty {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"empty"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 遍历字符串</span></div><div class="line"><span class="keyword">for</span> character <span class="keyword">in</span> <span class="string">"Dog"</span> {</div><div class="line">  <span class="built_in">print</span>(character)</div><div class="line">}</div><div class="line"><span class="comment">// 字符数</span></div><div class="line"><span class="keyword">let</span> str = <span class="string">"hello"</span></div><div class="line"><span class="built_in">println</span>(<span class="built_in">countElements</span>(str)) <span class="comment">// 5</span></div><div class="line"><span class="comment">// 字符串插值</span></div><div class="line"><span class="keyword">let</span> greeting = <span class="string">"hello"</span></div><div class="line"><span class="keyword">let</span> msg = <span class="string">"<span class="subst">\(greeting)</span> world"</span></div><div class="line"><span class="comment">// 字符串相等</span></div><div class="line"><span class="keyword">let</span> a = <span class="string">"hello world"</span></div><div class="line"><span class="keyword">let</span> b = <span class="string">"hello world"</span></div><div class="line"><span class="keyword">if</span> a == b {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"the same"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 前缀后缀</span></div><div class="line"><span class="keyword">let</span> str = <span class="string">"prefix and suffix"</span></div><div class="line"><span class="built_in">println</span>(str.hasPrefix(<span class="string">"prefix"</span>)) <span class="comment">// true</span></div><div class="line"><span class="built_in">println</span>(str.hasSuffix(<span class="string">"suffix"</span>)) <span class="comment">// true</span></div><div class="line"><span class="comment">// 大写小写</span></div><div class="line"><span class="keyword">let</span> str = <span class="string">"hello world"</span></div><div class="line"><span class="keyword">let</span> upperCase = str.uppercaseString <span class="comment">// HELLO WORLD</span></div><div class="line"><span class="keyword">let</span> lowerCase = upperCase.lowercaseString <span class="comment">// hello world</span></div><div class="line"><span class="comment">// Unicode</span></div><div class="line"><span class="keyword">let</span> dogString = <span class="string">"Dog!🐶"</span></div><div class="line"><span class="keyword">for</span> codeUnit <span class="keyword">in</span> dogString.utf8 {</div><div class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(codeUnit)</span> "</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 68 111 103 33 240 159 144 182</span></div><div class="line"><span class="keyword">for</span> codeUnit <span class="keyword">in</span> dogString.utf16 {</div><div class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(codeUnit)</span> "</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 68 111 103 33 55357 56374</span></div><div class="line"><span class="keyword">for</span> scalar <span class="keyword">in</span> dogString.unicodeScalars {</div><div class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(scalar.value)</span> "</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 68 111 103 33 128054</span></div></pre></td></tr></table></figure>

<h1 id="集合类型">集合类型</h1>
<ul>
<li>数组</li>
<li>字典</li>
</ul>
<h2 id="数组">数组</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 构造数组</span></div><div class="line"><span class="keyword">var</span> a = []</div><div class="line"><span class="keyword">var</span> b = [<span class="type">Int</span>]()</div><div class="line"><span class="comment">// 构造3个同为0.0的初始值</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">c</span> = [<span class="type">Double</span>](<span class="built_in">count</span>: <span class="number">3</span>, repeatedValue: <span class="number">0.0</span>)</div><div class="line"><span class="comment">// 数组相加</span></div><div class="line"><span class="keyword">var</span> d = [<span class="string">"h"</span>, <span class="string">"e"</span>] + [<span class="string">"l"</span>, <span class="string">"l"</span>, <span class="string">"o"</span>]</div><div class="line"><span class="keyword">var</span> shoppingList: [<span class="type">String</span>] = [<span class="string">"Eggs"</span>, <span class="string">"Milk"</span>]</div><div class="line"><span class="comment">// 数组大小</span></div><div class="line">shoppingList.<span class="built_in">count</span></div><div class="line"><span class="comment">// 是否为空</span></div><div class="line"><span class="keyword">if</span> shoppingList.isEmpty {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"list is empty"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 添加一项到最后</span></div><div class="line">shoppingList.append(<span class="string">"Flour"</span>)</div><div class="line"><span class="comment">// 添加多项到最后</span></div><div class="line">shoppingList += [<span class="string">"Cheese"</span>, <span class="string">"Butter"</span>]</div><div class="line"><span class="comment">// 添加一项到指定位置</span></div><div class="line">shoppingList.insert(<span class="string">"Bean"</span>, atIndex: <span class="number">0</span>)</div><div class="line"><span class="comment">// 删除指定一项</span></div><div class="line">shoppingList.removeAtIndex(<span class="number">0</span>)</div><div class="line"><span class="comment">// 删除最后一项</span></div><div class="line">shoppingList.removeLast()</div><div class="line"><span class="comment">// 批量替换</span></div><div class="line">shoppingList[<span class="number">1</span>...<span class="number">3</span>] = [<span class="string">"Bananas"</span>, <span class="string">"Apples"</span>]</div><div class="line"><span class="comment">// 遍历</span></div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> shoppingList {</div><div class="line">  <span class="built_in">println</span>(item)</div><div class="line">}</div><div class="line"><span class="keyword">for</span> (index, value) <span class="keyword">in</span> <span class="class"><span class="keyword">enum</span><span class="title">erate</span>(<span class="title">shoppingList</span>) </span>{</div><div class="line">  <span class="built_in">println</span>(<span class="string">"Item <span class="subst">\(index + <span class="number">1</span>)</span>: <span class="subst">\(value)</span>"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="字典">字典</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 构造字典</span></div><div class="line"><span class="keyword">var</span> a = [<span class="string">"TYO"</span>: <span class="string">"Tokyo"</span>, <span class="string">"DUB"</span>: <span class="string">"Dublin"</span>]</div><div class="line"><span class="keyword">var</span> b = <span class="type">Dictionary</span>&lt;<span class="type">Int</span>, <span class="type">String</span>&gt;()</div><div class="line"><span class="keyword">var</span> <span class="built_in">c</span>[<span class="number">16</span>] = <span class="string">"sixteen"</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">c</span> = [:]</div><div class="line"><span class="keyword">var</span> airports: [<span class="type">String</span>: <span class="type">String</span>] = [<span class="string">"TYO"</span>: <span class="string">"Tokyo"</span>, <span class="string">"DUB"</span>: <span class="string">"Dublin"</span>]</div><div class="line"><span class="comment">// 字典大小</span></div><div class="line">airports.<span class="built_in">count</span></div><div class="line"><span class="comment">// 是否为空</span></div><div class="line"><span class="keyword">if</span> airports.isEmpty {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"list is empty"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 添加一项</span></div><div class="line">airports[<span class="string">"LHR"</span>] = <span class="string">"London"</span></div><div class="line"><span class="comment">// 修改</span></div><div class="line">airports[<span class="string">"LHR"</span>] = <span class="string">"London Heathrow"</span></div><div class="line"><span class="comment">// 修改，返回修改前的值</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> oldValue = airports.updateValue(<span class="string">"Dublin Internation"</span>, forKey: <span class="string">"DUB"</span>) {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"The old vaule was <span class="subst">\(oldValue)</span>"</span>)</div><div class="line">} <span class="keyword">else</span> {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"That is not in the list"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 删除</span></div><div class="line">airports[<span class="string">"LHR"</span>] = <span class="built_in">nil</span></div><div class="line"><span class="comment">// 删除，返回被删除的值</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> removedValue = airports.removeVauleForKey(<span class="string">"DUB"</span>) {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"The removed item is <span class="subst">\(removedValue)</span>"</span>)</div><div class="line">} <span class="keyword">else</span> {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"That is not in the list"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 遍历</span></div><div class="line"><span class="keyword">for</span> (airportCode, airportName) <span class="keyword">in</span> airports {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"<span class="subst">\(airportCode)</span>: <span class="subst">\(airportName)</span>"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 遍历key</span></div><div class="line"><span class="keyword">for</span> airportCode <span class="keyword">in</span> airports.keys {</div><div class="line">  <span class="built_in">println</span>(airportCode)</div><div class="line">}</div><div class="line"><span class="comment">// 遍历value</span></div><div class="line"><span class="keyword">for</span> airportName <span class="keyword">in</span> airports.values {</div><div class="line">  <span class="built_in">println</span>(airportName)</div><div class="line">}</div><div class="line"><span class="comment">// 用keys或values构造新数组</span></div><div class="line"><span class="keyword">let</span> airportCodes = <span class="type">Array</span>(airports.keys)</div><div class="line"><span class="keyword">let</span> airportNames = <span class="type">Array</span>(airports.values)</div></pre></td></tr></table></figure>

<h1 id="控制流">控制流</h1>
<ul>
<li>循环语句<ul>
<li>for</li>
<li>while</li>
</ul>
</li>
<li>条件语句<ul>
<li>if</li>
<li>switch</li>
<li>where</li>
</ul>
</li>
<li>控制转移语句<ul>
<li>continue</li>
<li>break</li>
<li>fallthrough</li>
<li>return</li>
</ul>
</li>
</ul>
<h2 id="循环语句">循环语句</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 遍历区间</span></div><div class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">1</span>...<span class="number">5</span> {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"hello world"</span>);</div><div class="line">}</div><div class="line"><span class="comment">// 遍历数组</span></div><div class="line"><span class="keyword">let</span> names = [<span class="string">"Anna"</span>, <span class="string">"Alex"</span>, <span class="string">"Brian"</span>, <span class="string">"Jack"</span>]</div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"Hello, <span class="subst">\(name)</span>"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 遍历字典</span></div><div class="line"><span class="keyword">let</span> numOfLegs = [<span class="string">"spider"</span>: <span class="number">8</span>, <span class="string">"ant"</span>: <span class="number">6</span>, <span class="string">"cat"</span>: <span class="number">4</span>]</div><div class="line"><span class="keyword">for</span> (name, <span class="built_in">count</span>) <span class="keyword">in</span> numOfLegs {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"<span class="subst">\(name)</span> have <span class="subst">\(<span class="built_in">count</span>)</span> legs"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 遍历字符串</span></div><div class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">"Hello"</span> {</div><div class="line">  <span class="built_in">println</span>(char)</div><div class="line">}</div><div class="line"><span class="comment">// 条件递增</span></div><div class="line"><span class="keyword">for</span> <span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="number">3</span>; ++index {</div><div class="line">  <span class="built_in">println</span>(index)</div><div class="line">}</div><div class="line"><span class="comment">// while循环</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span> {</div><div class="line">  <span class="built_in">println</span>(i++)</div><div class="line">}</div><div class="line"><span class="keyword">var</span> j = <span class="number">0</span></div><div class="line"><span class="keyword">do</span> {</div><div class="line">  <span class="built_in">println</span>(j++)</div><div class="line">} <span class="keyword">while</span> j &lt; <span class="number">10</span></div></pre></td></tr></table></figure>

<h2 id="条件语句">条件语句</h2>
<h3 id="if">if</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = -<span class="number">1</span></div><div class="line"><span class="keyword">if</span> a &lt; <span class="number">0</span> {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"condition 1"</span>)</div><div class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; <span class="number">10</span>) {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"condition 2"</span>)</div><div class="line">} <span class="keyword">else</span> {</div><div class="line">  <span class="built_in">println</span>(<span class="string">"condition 4"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="switch">switch</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正确</span></div><div class="line"><span class="keyword">let</span> someCharacter: <span class="type">Character</span> = <span class="string">"e"</span></div><div class="line"><span class="keyword">switch</span> someCharacter {</div><div class="line"><span class="keyword">case</span> <span class="string">"a"</span>, <span class="string">"e"</span>, <span class="string">"i"</span>, <span class="string">"o"</span>, <span class="string">"u"</span>:</div><div class="line">  <span class="built_in">println</span>(<span class="string">"<span class="subst">\(someCharacter)</span> is a vowel"</span>)</div><div class="line"><span class="keyword">case</span> <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>, <span class="string">"m"</span>,</div><div class="line"><span class="string">"n"</span>, <span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>, <span class="string">"t"</span>, <span class="string">"v"</span>, <span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>:</div><div class="line">  <span class="built_in">println</span>(<span class="string">"<span class="subst">\(someCharacter)</span> is a consonant"</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">  <span class="built_in">println</span>(<span class="string">"<span class="subst">\(someCharacter)</span> is not a vowel or a consonant"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 错误</span></div><div class="line"><span class="keyword">let</span> anotherCharacter: <span class="type">Character</span> = <span class="string">"a"</span></div><div class="line"><span class="keyword">switch</span> anotherCharacter {</div><div class="line"><span class="keyword">case</span> <span class="string">"a"</span>:</div><div class="line"><span class="keyword">case</span> <span class="string">"A"</span>:</div><div class="line">  <span class="built_in">println</span>(<span class="string">"The letter A"</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">  <span class="built_in">println</span>(<span class="string">"Not the letter A"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 区间匹配</span></div><div class="line"><span class="keyword">let</span> score = <span class="number">80</span></div><div class="line"><span class="keyword">switch</span> score {</div><div class="line"><span class="keyword">case</span> <span class="number">0</span>...<span class="number">59</span>:</div><div class="line">  <span class="built_in">println</span>(<span class="string">"bad"</span>)</div><div class="line"><span class="keyword">case</span> <span class="number">60</span>...<span class="number">79</span>:</div><div class="line">  <span class="built_in">println</span>(<span class="string">"ok"</span>)</div><div class="line"><span class="keyword">case</span> <span class="number">80</span>...<span class="number">89</span>:</div><div class="line">  <span class="built_in">println</span>(<span class="string">"excellent"</span>)</div><div class="line"><span class="keyword">case</span> <span class="number">90</span>...<span class="number">100</span></div><div class="line">  <span class="built_in">println</span>(<span class="string">"perfect"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 元组</span></div><div class="line"><span class="keyword">let</span> somePoint = (<span class="number">1</span>, <span class="number">1</span>)</div><div class="line"><span class="keyword">switch</span> somePoint {</div><div class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>):</div><div class="line">    <span class="built_in">println</span>(<span class="string">"(0, 0) is at the origin"</span>)</div><div class="line"><span class="keyword">case</span> (<span class="number">_</span>, <span class="number">0</span>):</div><div class="line">    <span class="built_in">println</span>(<span class="string">"(<span class="subst">\(somePoint.<span class="number">0</span>)</span>, 0) is on the x-axis"</span>)</div><div class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">_</span>):</div><div class="line">    <span class="built_in">println</span>(<span class="string">"(0, <span class="subst">\(somePoint.<span class="number">1</span>)</span>) is on the y-axis"</span>)</div><div class="line"><span class="keyword">case</span> (-<span class="number">2</span>...<span class="number">2</span>, -<span class="number">2</span>...<span class="number">2</span>):</div><div class="line">    <span class="built_in">println</span>(<span class="string">"(<span class="subst">\(somePoint.<span class="number">0</span>)</span>, <span class="subst">\(somePoint.<span class="number">1</span>)</span>) is inside the box"</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="built_in">println</span>(<span class="string">"(<span class="subst">\(somePoint.<span class="number">0</span>)</span>, <span class="subst">\(somePoint.<span class="number">1</span>)</span>) is outside of the box"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 值绑定</span></div><div class="line"><span class="keyword">let</span> anotherPoint = (<span class="number">2</span>, <span class="number">0</span>)</div><div class="line"><span class="keyword">switch</span> anotherPoint {</div><div class="line"><span class="keyword">case</span> (<span class="keyword">let</span> x, <span class="number">0</span>):</div><div class="line">    <span class="built_in">println</span>(<span class="string">"on the x-axis with an x value of <span class="subst">\(x)</span>"</span>)</div><div class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="keyword">let</span> y):</div><div class="line">    <span class="built_in">println</span>(<span class="string">"on the y-axis with a y value of <span class="subst">\(y)</span>"</span>)</div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y):</div><div class="line">    <span class="built_in">println</span>(<span class="string">"somewhere else at (<span class="subst">\(x)</span>, <span class="subst">\(y)</span>)"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// where</span></div><div class="line"><span class="keyword">let</span> yetAnotherPoint = (<span class="number">1</span>, -<span class="number">1</span>)</div><div class="line"><span class="keyword">switch</span> yetAnotherPoint {</div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y) <span class="keyword">where</span> x == y:</div><div class="line">    <span class="built_in">println</span>(<span class="string">"(<span class="subst">\(x)</span>, <span class="subst">\(y)</span>) is on the line x == y"</span>)</div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y) <span class="keyword">where</span> x == -y:</div><div class="line">    <span class="built_in">println</span>(<span class="string">"(<span class="subst">\(x)</span>, <span class="subst">\(y)</span>) is on the line x == -y"</span>)</div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y):</div><div class="line">    <span class="built_in">println</span>(<span class="string">"(<span class="subst">\(x)</span>, <span class="subst">\(y)</span>) is just some arbitrary point"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="控制转移语句">控制转移语句</h2>
<h3 id="continue">continue</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 继续下个循环</span></div><div class="line"><span class="keyword">let</span> input = <span class="string">"great minds think alike"</span></div><div class="line"><span class="keyword">var</span> output = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> <span class="keyword">char</span> <span class="keyword">in</span> input {</div><div class="line">  <span class="keyword">switch</span> <span class="keyword">char</span> {</div><div class="line">  <span class="keyword">case</span> <span class="string">"a"</span>, <span class="string">"e"</span>, <span class="string">"i"</span>, <span class="string">"o"</span>, <span class="string">"u"</span>:</div><div class="line">    <span class="keyword">continue</span></div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    output.append(<span class="keyword">char</span>)</div><div class="line">  }</div><div class="line">}</div><div class="line">println(output)</div></pre></td></tr></table></figure>

<h3 id="break">break</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 循环语句中的break，结束循环</span></div><div class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">"hello"</span> {</div><div class="line">  <span class="keyword">if</span> char == <span class="string">"l"</span> {</div><div class="line">    <span class="keyword">break</span></div><div class="line">  }</div><div class="line">}</div><div class="line"><span class="comment">// switch语句中得break，忽略该分支</span></div><div class="line"><span class="keyword">let</span> numberSymbol: <span class="type">Character</span> = <span class="string">"三"</span></div><div class="line"><span class="keyword">switch</span> numberSymbol {</div><div class="line"><span class="keyword">case</span> <span class="string">"一"</span>:</div><div class="line">    <span class="built_in">println</span>(<span class="string">"1"</span>)</div><div class="line"><span class="keyword">case</span> <span class="string">"二"</span>:</div><div class="line">    <span class="built_in">println</span>(<span class="string">"2"</span>)</div><div class="line"><span class="keyword">case</span> <span class="string">"三"</span>:</div><div class="line">    <span class="built_in">println</span>(<span class="string">"3"</span>)</div><div class="line"><span class="keyword">case</span> <span class="string">"四"</span>:</div><div class="line">    <span class="built_in">println</span>(<span class="string">"4"</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="keyword">break</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="fallthrough">fallthrough</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用fallthrough贯穿下个分支</span></div><div class="line"><span class="keyword">let</span> integerToDescribe = <span class="number">5</span></div><div class="line"><span class="keyword">var</span> description = <span class="string">"The number <span class="subst">\(integerToDescribe)</span> is"</span></div><div class="line"><span class="keyword">switch</span> integerToDescribe {</div><div class="line"><span class="keyword">case</span> <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>:</div><div class="line">    description += <span class="string">" a prime number, and also"</span></div><div class="line">    <span class="keyword">fallthrough</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">    description += <span class="string">" an integer."</span></div><div class="line">}</div><div class="line"><span class="built_in">println</span>(description)</div></pre></td></tr></table></figure>

<h3 id="带标签的语句">带标签的语句</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 在使用<span class="keyword">break</span>或<span class="keyword">continue</span>的时候可以指定操作哪个控制流</div><div class="line"><span class="reserved">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="attribute">loop</span>: <span class="keyword">while</span> i &lt; <span class="number">100</span> {</div><div class="line">  <span class="keyword">if</span> i == <span class="number">30</span> {</div><div class="line">    <span class="keyword">break</span> <span class="keyword">loop</span></div><div class="line">  }</div><div class="line">  i++</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="函数">函数</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">// 有返回值</div><div class="line">func len(<span class="operator"><span class="keyword">start</span>: <span class="built_in">Int</span>, <span class="keyword">end</span>: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> {</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">end</span> - <span class="keyword">start</span></div><div class="line">}</div><div class="line">// 无返回值</div><div class="line">func sayHello(name: <span class="keyword">String</span>) {</div><div class="line">  println(<span class="string">"Hello, \(name)"</span>)</div><div class="line">}</div><div class="line">// 多重返回值</div><div class="line">func search(name: <span class="keyword">String</span>) -&gt; (id: <span class="built_in">Int</span>, name: <span class="keyword">String</span>) {</div><div class="line">  <span class="keyword">var</span> map = [<span class="string">"jason"</span>: <span class="number">1</span>, <span class="string">"mark"</span>: <span class="number">2</span>]</div><div class="line">  <span class="keyword">return</span> (name, map[name])</div><div class="line">}</div><div class="line">// 外部参数名</div><div class="line">func <span class="keyword">join</span>(<span class="keyword">str</span> s1: <span class="keyword">String</span>, toStr s2: <span class="keyword">String</span>, joiner joiner: <span class="keyword">String</span>) -&gt; <span class="keyword">String</span> {</div><div class="line">    <span class="keyword">return</span> s1 + joiner + s2</div><div class="line">}</div><div class="line"><span class="keyword">join</span>(<span class="keyword">str</span>: <span class="string">"hello"</span>, toStr: <span class="string">"world"</span>, joiner: <span class="string">"，"</span>)</div><div class="line">// 简写外部参数名</div><div class="line">func <span class="keyword">join</span>(#<span class="keyword">str</span>: <span class="keyword">String</span>, #toStr: <span class="keyword">String</span>, #joiner: <span class="keyword">String</span>) -&gt; <span class="keyword">String</span> {</div><div class="line">  <span class="keyword">return</span> <span class="keyword">str</span> + joiner + toStr</div><div class="line">}</div><div class="line"><span class="keyword">join</span>(<span class="keyword">str</span>: <span class="string">"hello"</span>, toStr: <span class="string">"world"</span>, joiner: <span class="string">"，"</span>)</div><div class="line">// 默认参数</div><div class="line">func <span class="keyword">join</span>(<span class="keyword">str</span> s1: <span class="keyword">String</span>, toStr s2: <span class="keyword">String</span>, joiner joiner: <span class="keyword">String</span> = <span class="string">" "</span>) -&gt; <span class="keyword">String</span> {</div><div class="line">  <span class="keyword">return</span> <span class="keyword">str</span> + joiner + toStr</div><div class="line">}</div><div class="line"><span class="keyword">join</span>(<span class="keyword">str</span>: <span class="string">"hello"</span>, toStr: <span class="string">"world"</span>)</div><div class="line">// 默认带上外部参数</div><div class="line">func <span class="keyword">join</span>(s1: <span class="keyword">String</span>, s2: <span class="keyword">String</span>, joiner: <span class="keyword">String</span> = <span class="string">" "</span>) -&gt; <span class="keyword">String</span> {</div><div class="line">    <span class="keyword">return</span> s1 + joiner + s2</div><div class="line">}</div><div class="line"><span class="keyword">join</span>(<span class="string">"hello"</span>, <span class="string">"world"</span>, joiner: <span class="string">"-"</span>)</div><div class="line">// 可变参数</div><div class="line">func arithmeticMean(numbers: <span class="keyword">Double</span>...) -&gt; <span class="keyword">Double</span> {</div><div class="line">    <span class="keyword">var</span> total: <span class="keyword">Double</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> <span class="built_in">number</span> <span class="keyword">in</span> numbers {</div><div class="line">        total += <span class="built_in">number</span></div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> total / <span class="keyword">Double</span>(numbers.<span class="keyword">count</span>)</div><div class="line">}</div><div class="line">arithmeticMean(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">// 函数参数默认是常量，不能改变，可以加<span class="keyword">var</span>来定义变量参数</div><div class="line">func hello(<span class="keyword">var</span> <span class="keyword">str</span>: <span class="keyword">String</span>) -&gt; <span class="keyword">String</span> {</div><div class="line">  <span class="keyword">str</span> += <span class="string">",hello"</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">str</span></div><div class="line">}</div><div class="line">// 改变参数值，加inout，且不能被<span class="keyword">var</span>或let标记</div><div class="line">func swapTwoInts(inout a: <span class="built_in">Int</span>, inout b: <span class="built_in">Int</span>) {</div><div class="line">    let temporaryA = a</div><div class="line">    a = b</div><div class="line">    b = temporaryA</div><div class="line">}</div><div class="line"><span class="keyword">var</span> someInt = <span class="number">3</span></div><div class="line"><span class="keyword">var</span> anotherInt = <span class="number">107</span></div><div class="line">swapTwoInts(&someInt, &anotherInt) // 传入时加&</div><div class="line">println(<span class="string">"\(someInt) and \(anotherInt)"</span>) // <span class="number">107</span> <span class="keyword">and</span> <span class="number">3</span></div><div class="line">// 使用函数</div><div class="line"><span class="keyword">var</span> mathFunction: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = addTwoInts</div><div class="line"><span class="keyword">var</span> anotherMathFunction = addTwoInts</div><div class="line">// 函数作为参数</div><div class="line">func printMathResult(mathFunction: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span>, a: <span class="built_in">Int</span>, b: <span class="built_in">Int</span>) {</div><div class="line">    println(<span class="string">"Result: \(mathFunction(a, b))"</span>)</div><div class="line">}</div><div class="line">printMathResult(addTwoInts, <span class="number">3</span>, <span class="number">5</span>)</div><div class="line">// 函数作为返回值</div><div class="line">func stepForward(<span class="keyword">input</span>: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">input</span> + <span class="number">1</span></div><div class="line">}</div><div class="line">func stepBackward(<span class="keyword">input</span>: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">input</span> - <span class="number">1</span></div><div class="line">}</div><div class="line">func chooseStepFunction(backwards: Bool) -&gt; (<span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> {</div><div class="line">    <span class="keyword">return</span> backwards ? stepBackward : stepForward</div><div class="line">}</div><div class="line">// 嵌套函数</div><div class="line">func chooseStepFunction(backwards: Bool) -&gt; (<span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> {</div><div class="line">    func stepForward(<span class="keyword">input</span>: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> { <span class="keyword">return</span> <span class="keyword">input</span> + <span class="number">1</span> }</div><div class="line">    func stepBackward(<span class="keyword">input</span>: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> { <span class="keyword">return</span> <span class="keyword">input</span> - <span class="number">1</span> }</div><div class="line">    <span class="keyword">return</span> backwards ? stepBackward : stepForward</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="闭包">闭包</h1>
<h2 id="格式">格式</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 格式</div><div class="line">{ <span class="function"><span class="params">(parameters)</span> -&gt;</span> returnType <span class="keyword">in</span></div><div class="line">  statements</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="闭包作为参数">闭包作为参数</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 原式</div><div class="line">func backwards<span class="function"><span class="params">(s1: String, s2: String)</span> -&gt;</span> Bool {</div><div class="line">    <span class="keyword">return</span> s1 &gt; s2</div><div class="line">}</div><div class="line"><span class="reserved">var</span> reversed = sorted(names, backwards)</div><div class="line"><span class="regexp">//</span> 使用闭包</div><div class="line"><span class="reserved">var</span> reversed = sorted<span class="function"><span class="params">(names, { (s1: String, s2: String) -&gt; Bool <span class="keyword">in</span></span></span></div><div class="line">  <span class="keyword">return</span> s1 &gt; s2</div><div class="line">})</div><div class="line">// 根据上下文推断类型</div><div class="line"><span class="title">var</span> <span class="title">reversed</span> = <span class="title">sorted</span><span class="params">(names, { s1, s2 <span class="keyword">in</span> <span class="keyword">return</span> s1 &gt; s2 })</span></div><div class="line">// 单表达式闭包隐式返回</div><div class="line"><span class="title">var</span> <span class="title">reversed</span> = <span class="title">sorted</span><span class="params">(names, { s1, s2 <span class="keyword">in</span> s1 &gt; s2})</span></div><div class="line">// 参数名称缩写</div><div class="line"><span class="title">var</span> <span class="title">reversed</span> = <span class="title">sorted</span><span class="params">(names, { $<span class="number">0</span> &gt; $<span class="number">1</span> })</span></div><div class="line">// 运算符函数</div><div class="line"><span class="title">var</span> <span class="title">reversed</span> = <span class="title">sorted</span><span class="params">(names, &gt;)</span></div><div class="line">// 尾随闭包进行函数调用</div><div class="line"><span class="title">func</span> <span class="title">someFunctionThatTakesAClosure</span><span class="params">(closure: () -&gt; ())</span> {</div><div class="line">  // 函数体部分</div><div class="line">}</div><div class="line"><span class="title">someFunctionThatTakesAClosure</span><span class="params">()</span> {</div><div class="line">  // 闭包主体部分</div><div class="line">}</div><div class="line">// 尾随闭包进行函数调用（例子）</div><div class="line"><span class="title">var</span> <span class="title">reversed</span> = <span class="title">sorted</span><span class="params">(names)</span> { <span class="title">$0</span> &gt; <span class="title">$1</span> }</div></pre></td></tr></table></figure>

<h2 id="闭包作为返回值">闭包作为返回值</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 闭包是引用类型，将闭包赋给两个不同的变量/常量，两个值都指向一个闭包</div><div class="line">func makeIncrementor<span class="function"><span class="params">(forIncrement amount: Int)</span> -&gt;</span> <span class="function"><span class="params">()</span> -&gt;</span> Int {</div><div class="line">    <span class="reserved">var</span> runningTotal = <span class="number">0</span></div><div class="line">    func incrementor<span class="function"><span class="params">()</span> -&gt;</span> Int {</div><div class="line">        runningTotal += amount</div><div class="line">        <span class="keyword">return</span> runningTotal</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> incrementor</div><div class="line">}</div><div class="line"><span class="reserved">let</span> incrementByTen = makeIncrementor(<span class="attribute">forIncrement</span>: <span class="number">10</span>)</div><div class="line"><span class="reserved">let</span> incrementBySeven = makeIncrementor(<span class="attribute">forIncrement</span>: <span class="number">7</span>)</div><div class="line">incrementBySeven() <span class="regexp">//</span> 返回的值为<span class="number">7</span></div><div class="line">incrementByTen() <span class="regexp">//</span> 返回的值为<span class="number">40</span></div></pre></td></tr></table></figure>

<h1 id="枚举">枚举</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CompassPoint</span> </span>{</div><div class="line">  <span class="keyword">case</span> <span class="type">North</span></div><div class="line">  <span class="keyword">case</span> <span class="type">South</span></div><div class="line">  <span class="keyword">case</span> <span class="type">East</span></div><div class="line">  <span class="keyword">case</span> <span class="type">West</span></div><div class="line">}</div><div class="line"><span class="comment">// 一行</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Planet</span> </span>{</div><div class="line">  <span class="keyword">case</span> <span class="type">Mercury</span>, <span class="type">Venus</span>, <span class="type">Earth</span>, <span class="type">Mars</span>, <span class="type">Jupiter</span>, <span class="type">Saturn</span>, <span class="type">Uranus</span>, <span class="type">Neptune</span></div><div class="line">}</div><div class="line"><span class="keyword">var</span> directionToHead = <span class="type">CompassPoint</span>.<span class="type">West</span></div><div class="line">directionToHead = .<span class="type">East</span> <span class="comment">// 前面已经赋值了，可以用忽略前缀</span></div><div class="line"><span class="keyword">switch</span> directionToHead {</div><div class="line"><span class="keyword">case</span> .<span class="type">North</span>:</div><div class="line">  <span class="built_in">println</span>(<span class="string">"North"</span>)</div><div class="line"><span class="keyword">case</span> .<span class="type">South</span>:</div><div class="line">  <span class="built_in">println</span>(<span class="string">"South"</span>)</div><div class="line"><span class="keyword">case</span> .<span class="type">East</span>:</div><div class="line">  <span class="built_in">println</span>(<span class="string">"East"</span>)</div><div class="line"><span class="keyword">case</span> .<span class="type">West</span>:</div><div class="line">  <span class="built_in">println</span>(<span class="string">"West"</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 使用案例</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Barcode</span> </span>{</div><div class="line">  <span class="keyword">case</span> <span class="type">UPCA</span>(<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>)</div><div class="line">  <span class="keyword">case</span> <span class="type">QRCode</span>(<span class="type">String</span>)</div><div class="line">}</div><div class="line"><span class="keyword">var</span> productBarcode = <span class="type">Barcode</span>.<span class="type">UPCS</span>(<span class="number">8</span>, <span class="number">85909_51226</span>, <span class="number">3</span>)</div><div class="line">productBarcode = .<span class="type">QRCode</span>(<span class="string">"ABCDEFGHIJKLMNOP"</span>)</div><div class="line"><span class="comment">// 用法</span></div><div class="line"><span class="keyword">switch</span> productBarcode {</div><div class="line"><span class="keyword">case</span> .<span class="type">UPCA</span>(<span class="keyword">let</span> numberSystem, <span class="keyword">let</span> identifier, <span class="keyword">let</span> check):</div><div class="line">    <span class="built_in">println</span>(<span class="string">"UPC-A with value of <span class="subst">\(numberSystem)</span>, <span class="subst">\(identifier)</span>, <span class="subst">\(check)</span>."</span>)</div><div class="line"><span class="keyword">case</span> .<span class="type">QRCode</span>(<span class="keyword">let</span> productCode):</div><div class="line">    <span class="built_in">println</span>(<span class="string">"QR code with value of <span class="subst">\(productCode)</span>."</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 简化</span></div><div class="line"><span class="keyword">switch</span> productBarcode {</div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">UPCA</span>(numberSystem, identifier, check):</div><div class="line">    <span class="built_in">println</span>(<span class="string">"UPC-A with value of <span class="subst">\(numberSystem)</span>, <span class="subst">\(identifier)</span>, <span class="subst">\(check)</span>."</span>)</div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">QRCode</span>(productCode):</div><div class="line">    <span class="built_in">println</span>(<span class="string">"QR code with value of <span class="subst">\(productCode)</span>."</span>)</div><div class="line">}</div><div class="line"><span class="comment">// 赋原始值，当整型被赋原始值，其他成员没有值，会自动递增</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Planet</span>: <span class="title">Int</span> </span>{</div><div class="line">    <span class="keyword">case</span> <span class="type">Mercury</span> = <span class="number">1</span>, <span class="type">Venus</span>, <span class="type">Earth</span>, <span class="type">Mars</span>, <span class="type">Jupiter</span>, <span class="type">Saturn</span>, <span class="type">Uranus</span>, <span class="type">Neptune</span></div><div class="line">}</div><div class="line"><span class="keyword">let</span> earthsOrder = <span class="type">Planet</span>.<span class="type">Earth</span>.toRaw() <span class="comment">// earthsOrder为3</span></div><div class="line"><span class="keyword">let</span> possiblePlanet = <span class="type">Planet</span>.fromRaw(<span class="number">7</span>) <span class="comment">// possiblePlanet为可选值，为Planet.Uranus</span></div></pre></td></tr></table></figure>

<p>未完待续</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="基础部分">基础部分</h1>
<h2 id="常量与变量">常量与变量</h2>
<ul>
<li>let（常量）</li>
<li>var（变量）</li>
</ul>
<figure class="highlight"><table><tr><td clas]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NodeJs教程]]></title>
    <link href="http://yoursite.com/2014/10/29/NodeJs%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2014/10/29/NodeJs教程/</id>
    <published>2014-10-29T07:53:03.000Z</published>
    <updated>2015-01-26T14:50:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2>
<p>随着Node.js的发展，Javascript应用在这几年突飞猛进的流行。如果你去<a href="//www.modulecounts.com/">modulecounts.com</a>上看看，你会发现Node packages已经超过了Ruby。另外Node packages的发展速度已经超过了Ruby、Python和Java总和。<br><img src="/img/node/img-1.jpg" alt="modulecounts"><br>在这篇文章里将介绍Node最重要的几个方面带领你走上正轨，开始构建自己的应用。</p>
<h3 id="是什么让Node比Rails及其他语言更加流行？">是什么让Node比Rails及其他语言更加流行？</h3>
<p>Node自身构建在Chrome最强的的Javascript引擎，作为异步式、事件驱动的框架，专为建设可伸缩网络应用而设计。基本上是Javascript加一堆C/C++的互相作用的文件系统，来启动HTTP或TCP等服务。</p>
<p>Node是单线程的，使用基于event loop的并发模型。它是非阻塞的，所以它不会使程序等待，而是注册一个回调函数使程序继续运行。这意味着我们不使用多线程也可以操控异步操作。</p>
<p>在一些顺序执行的语言中如PHP，为了获取HTML的内容，你会这么做：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$response</span> = file_get_contents(<span class="string">"http://example.com"</span>);</div><div class="line">print_r(<span class="variable">$response</span>);</div></pre></td></tr></table></figure>

<p>在Node你用回调函数可以这么做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">http.request({ hostname: <span class="string">'example.com'</span> }, <span class="function"><span class="keyword">function</span><span class="params">(res)</span> </span>{</div><div class="line">  res.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">  res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span><span class="params">(chunk)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(chunk);</div><div class="line">  });</div><div class="line">}).end();</div></pre></td></tr></table></figure>

<p>在实现方面有两大不同：</p>
<blockquote>
<ul>
<li>Node允许在等待响应的时候执行其他任务。</li>
<li>Node应用程序不将缓存文件放到内存中，但它会将文件一部分一部分的输出。</li>
</ul>
</blockquote>
<p>Node和其他event loop驱动的系统（如Ruby的EventMachine library和Python的Twisted）有很大的不同。</p>
<p>Node所有的类库完全是为非阻塞而设计的，其他的就不能这么说了。</p>
<h3 id="使用场景">使用场景</h3>
<p>Node是I/O限制应用（或等待用户事件应用）的理想开发工具，可是并不适用于大量使用CPU的应用，但在数据密集型实时应用（DIRT）、单页应用、JSON API服务和数据流应用中表现出色。</p>
<h3 id="npm，官方Node_package包管理工具">npm，官方Node package包管理工具</h3>
<p>Node的成功很大部分归功于npm，npm是随Node一起安装的package包管理工具。npm有很多优点：</p>
<blockquote>
<ul>
<li>将应用依赖类库安装在项目下，而非全局安装。</li>
<li>能在同一时间管理不同版本的同一模块。</li>
<li>你能指定压缩包或git仓库来安装。</li>
<li>你能很容易的发布自己的模块到npm上。</li>
<li>在创建CLI（其他人可以通过npm安装并使用）应用很有用。</li>
</ul>
</blockquote>
<h3 id="资源">资源</h3>
<p>想了解更多关于为什么用Node，可以访问<a href="//www.toptal.com/nodejs/why-the-hell-would-i-use-node-js">这篇文章</a>。</p>
<h2 id="安装Node-js和NPM">安装Node.js和NPM</h2>
<p>在Windows和OS X下可以通过专门的安装包安装，然而有时候你想在不同版本的Node上测试自己的代码，可以使用NVM（Node Version manager）。</p>
<p>通过NVM你可以安装不同版本的Node在你的操作系统里，实现不同版本间的切换。下面介绍如何在Ubuntu系统下安装NVM。</p>
<p>首先我们要确保我们系统安装了C++编译器：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> apt-get update</div><div class="line">$ <span class="built_in">sudo</span> apt-get install build-essential libssl-dev</div></pre></td></tr></table></figure>

<p>接着拷贝下面这行命令到控制台：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl https://raw.githubusercontent.com/creationix/nvm/v0.<span class="number">13.1</span>/install.sh | bash</div></pre></td></tr></table></figure>

<p>在此NVM应该就被正确安装了，我们确认一下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm</div></pre></td></tr></table></figure>

<p>如果当输入<code>nvm</code>时没有出现错误，表示安装成功。现在我们可以安装Node和npm了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm install v0.<span class="number">10.31</span></div></pre></td></tr></table></figure>

<p>输出应该是这样的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ nvm install v0.<span class="number">10.31</span></div><div class="line"><span class="comment">################################################################## 100.0%</span></div><div class="line">Now using node v0.<span class="number">10.31</span></div></pre></td></tr></table></figure>

<p>这样node和npm都可以在控制台使用了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ node -v && npm -v</div><div class="line">v0.<span class="number">10.31</span></div><div class="line"><span class="number">1.4</span>.<span class="number">23</span></div></pre></td></tr></table></figure>

<p>还有最后一件事我们需要做，需要设置设置默认的Node版本当我们下次登录：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm alias default <span class="number">0.10</span>.<span class="number">31</span></div></pre></td></tr></table></figure>

<p>我们可以安装其他版本的Node就像我们之前那样安装，可以使用<code>nvm use</code>进行版本切换：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nvm install v0.<span class="number">8.10</span></div><div class="line">$ nvm use v0.<span class="number">8.10</span></div></pre></td></tr></table></figure>

<p>如果不知道你在系统了装了什么版本的Node，你可以输入<code>nvm list</code>，将以列表形式显示版本信息，包括现在版本和默认版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ nvm list</div><div class="line">v0.<span class="number">6.3</span></div><div class="line">v0.<span class="number">6.12</span></div><div class="line">v0.<span class="number">6.14</span></div><div class="line">v0.<span class="number">6.19</span></div><div class="line">v0.<span class="number">7.7</span></div><div class="line">v0.<span class="number">7.8</span></div><div class="line">v0.<span class="number">7.9</span></div><div class="line">v0.<span class="number">8.6</span></div><div class="line">v0.<span class="number">8.11</span></div><div class="line">v0.<span class="number">10.3</span></div><div class="line">v0.<span class="number">10.12</span></div><div class="line">v0.<span class="number">10.15</span></div><div class="line">v0.<span class="number">10.21</span></div><div class="line">v0.<span class="number">10.24</span></div><div class="line">v0.<span class="number">11.9</span></div><div class="line">current: v0.<span class="number">10.24</span></div><div class="line">default -&gt; v0.<span class="number">10.24</span></div></pre></td></tr></table></figure>

<h3 id="资源-1">资源</h3>
<p>想了解更多关于如何用NVM安装Node，请访问<a href="//www.digitalocean.com/community/tutorials/how-to-install-node-js-with-nvm-node-version-manager-on-a-vps">这篇文章</a>。</p>
<h2 id="Node基础">Node基础</h2>
<p>我们将看下Node.js主要概念：</p>
<blockquote>
<ul>
<li>如何引入外部模块</li>
<li>回调函数的作用</li>
<li>事件驱动（EventEmitter）模式</li>
<li>数据流</li>
</ul>
</blockquote>
<h3 id="模块">模块</h3>
<p>Java和Python用<code>import</code>去加载其他模块，PHP和Ruby用<code>require</code>加载。Node在模块上实现了CommonJS接口，通过<code>require</code>关键字去加载依赖模块。</p>
<p>例如我们可以这样加载系统模块：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> dns = <span class="built_in">require</span>(<span class="string">'dns'</span>);</div></pre></td></tr></table></figure>

<p>我们还能加载本地文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myFile = <span class="built_in">require</span>(<span class="string">'./myFile'</span>); <span class="comment">// loads myFile.js</span></div></pre></td></tr></table></figure>

<p>用那npm安装模块，可在<a href="//www.npmjs.org/">这个网站</a>或Github上搜索。下面介绍如何下载模块到本地：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># where express === module name</span></div><div class="line">$ npm install express</div></pre></td></tr></table></figure>

<p>你能在代码里引用npm安装的模块，和引用系统模块一样，你不用考虑绝对和相对路径。</p>
<p>有一点非常好的是Node模块不会自动污染全局作用域，相反你需要为模块分配一个变量名，这意味着你不用担心两个或多个模块里的函数名称冲突了。</p>
<p>当创建你自己的模块，在<code>exports</code>的时候需要注意（无论是函数、对象、数字或是其它）。你让<code>exports</code>等于一个对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = { name: <span class="string">'John'</span>, age: <span class="number">20</span> };</div><div class="line"><span class="built_in">module</span>.exports = person;</div></pre></td></tr></table></figure>

<p>也可以直接在<code>exports</code>对象上添加相应的属性或函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">exports.name = <span class="string">'John'</span>;</div><div class="line">exports.age = <span class="number">20</span>;</div></pre></td></tr></table></figure>

<p>不同的模块之间不共享作用域，所以如果你想要在不同的模块之间共享变量，你必须引入这个模块。另一个需要注意的是模块只加载一次，之后将缓存到Node。</p>
<p>跟浏览器不同，Node没有<code>window</code>全局变量，但是有两个全局变量<code>globals</code>和<code>process</code>，你必须避免在这两个全局变量添加属性或函数。</p>
<h3 id="回调函数">回调函数</h3>
<p>在异步编程里，如果函数没有执行完成是不会返回值的，不过我们可以采用<code>continuation-passing style</code>（CPS）解决，想了解更多关于CPS，点击<a href="//en.wikipedia.org/wiki/Continuation-passing_style">这里</a>。</p>
<p>通过这种方式，一个异步的函数可以调用一个回调函数（一般是作为最后一个参数传入），这样如果异步函数执行完后就会执行相应的回调函数。</p>
<p>下面是一个查看谷歌IPv4地址的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dns = <span class="built_in">require</span>(<span class="string">'dns'</span>);</div><div class="line">dns.resolve4(<span class="string">'www.google.com'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err, addresses)</span> </span>{</div><div class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'addresses: '</span> + <span class="built_in">JSON</span>.stringify(addresses));</div><div class="line">});</div></pre></td></tr></table></figure>

<p>我们写了个回调函数(那个匿名函数)作为<code>dns.resolve4</code>这个异步函数的第二个参数传入。一旦异步函数<code>dns.resolve4</code>执行完成了就会调用回调函数，以此来继续程序。</p>
<h3 id="事件">事件</h3>
<p>这个标准的回调函数范式对于在异步函数执行完成后需要提醒情况非常适用。然而，有一些情况是对于不同事件需要非同时的提醒：</p>
<p>让我们看一个调用IRC客户端的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> irc = <span class="built_in">require</span>(<span class="string">'irc'</span>);</div><div class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> irc.Client(<span class="string">'irc.freenode.net'</span>, <span class="string">'myIrcBot'</span>, {</div><div class="line">  channels: [<span class="string">'#sample-channel'</span>]</div><div class="line">});</div><div class="line">client.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span><span class="params">(message)</span> </span>{</div><div class="line">  <span class="built_in">console</span>.error(<span class="string">'error: '</span>, message);</div><div class="line">});</div><div class="line">client.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'connected to the irc server'</span>);</div><div class="line">});</div><div class="line">client.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(from, to, message)</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(from + <span class="string">' =&gt; '</span> + to + <span class="string">': '</span> + message);</div><div class="line">});</div><div class="line">client.on(<span class="string">'pm'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(from, message)</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(from + <span class="string">' =&gt; ME: '</span> + message);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>在上面的例子，我们监听不同的事件：</p>
<blockquote>
<ul>
<li><code>connect</code>事件，当客户端和IRC服务端连接成功时候触发。</li>
<li><code>error</code>事件，当发生错误时触发。</li>
<li>当信息来临时触发<code>message</code>和<code>pm</code>事件。</li>
</ul>
</blockquote>
<p>上面提到的事件让使用<code>EventEmitter</code>模式更加理想了。</p>
<p><code>EventEmitter</code>模式实现了用户可以订阅他们喜欢的事件。这种模式可能你在浏览器那已经很熟悉了，经常用于绑定DOM事件。</p>
<p>Node的核心里有一个<code>EventEmitter</code>类，让我们创造自己的<code>EventEmitter</code>对象。现在我们创建一个继承<code>EventEmitter</code>的<code>MemoryWatcher</code>类，再绑定两个事件：</p>
<ul>
<li>定期的<code>data</code>事件，表示内存使用量</li>
<li><code>error</code>事件，防止内存使用超出限制</li>
</ul>
<p><code>MemoryWatcher</code>类如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MemoryWatcher</span><span class="params">(opts)</span> </span>{</div><div class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> MemoryWatcher)) {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MemoryWatcher();</div><div class="line">  }</div><div class="line">  opts = opts || {</div><div class="line">    frequency: <span class="number">30000</span> <span class="comment">// 30 seconds</span></div><div class="line">  };</div><div class="line">  EventEmitter.call(<span class="keyword">this</span>);</div><div class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">  setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> bytes = process.memoryUsage().rss;</div><div class="line">    <span class="keyword">if</span> (opts.maxBytes && bytes &gt; opts.maxBytes) {</div><div class="line">      that.emit(<span class="string">'error'</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Memory exceeded '</span> + opts.maxBytes + <span class="string">' bytes'</span>));</div><div class="line">    }<span class="keyword">else</span> {</div><div class="line">      that.emit(<span class="string">'data'</span>, bytes);</div><div class="line">    }</div><div class="line">  }, opts.frequency);</div><div class="line">}</div><div class="line">util.inherits(MemoryWatcher, EventEmitter);</div></pre></td></tr></table></figure>

<p>使用非常简单：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mem = <span class="keyword">new</span> MemoryWatcher({</div><div class="line">  maxBytes: <span class="number">12455936</span>,</div><div class="line">  frequency: <span class="number">5000</span></div><div class="line">});</div><div class="line">mem.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span><span class="params">(bytes)</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(bytes);</div><div class="line">});</div><div class="line">mem.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span><span class="params">(err)</span> </span>{</div><div class="line">  <span class="keyword">throw</span> err;</div><div class="line">});</div></pre></td></tr></table></figure>

<p>一个更简单的创造<code>EventEmitter</code>对象方式是创建一个<code>EventEmitter</code>的新对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</div><div class="line"><span class="keyword">var</span> emitter = <span class="keyword">new</span> EventEmitter();</div><div class="line">setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(process.memoryUsage().rss);</div><div class="line">}, <span class="number">30000</span>);</div></pre></td></tr></table></figure>

<h3 id="数据流">数据流</h3>
<p>流是异步地操纵数据流的一个抽象的接口，它们和Unix的管道命令很相似，可以分为五类：可读、可写、转换、双向和经典。</p>
<p>和Unix管道命令一样，Node数据流也实现了<code>.pipe()</code>接口。数据流最棒的地方是你不需要将所有数据缓存到内存中，它们就可以很好的结合在一起。</p>
<p>为了更好的理解数据流是如何工作的，我们将创建一个可以读取数据的应用，用AES-256算法加密数据，用gzip压缩数据。所有都是使用数据流的，这意味着每读一块数据我们都将它加密和压缩：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</div><div class="line"><span class="keyword">var</span> password = <span class="keyword">new</span> Buffer(process.env.PASS || <span class="string">'password'</span>);</div><div class="line"><span class="keyword">var</span> encryptStream = crypto.createCipher(<span class="string">'aes-256-cbc'</span>, password);</div><div class="line"><span class="keyword">var</span> gzip = zlib.createGzip();</div><div class="line"><span class="keyword">var</span> readStream = fs.createReadStream(filename); <span class="comment">// current file</span></div><div class="line"><span class="keyword">var</span> writeStream = fs.createWriteStream(dirname + <span class="string">'/out.gz'</span>);</div><div class="line">readStream <span class="comment">// reads current file</span></div><div class="line">  .pipe(encryptStream) <span class="comment">// encrypts</span></div><div class="line">  .pipe(gzip) <span class="comment">// compresses</span></div><div class="line">  .pipe(writeStream) <span class="comment">// writes to out file</span></div><div class="line">  .on(<span class="string">'finish'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="comment">// all done</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'done'</span>);</div><div class="line">  });</div></pre></td></tr></table></figure>

<p>在这里我们使用可读流，将它导入到加密流，再导入到gzip压缩流，最后导入到输出流（将内容显示到屏幕上）。加密流和压缩流属于转换流，它表示将输入数据以某种方式计算处理后输出数据。</p>
<p>应用运行后会生成一个<code>out.gz</code>的文件。现在我们来解密这个文件，并将内容输出到控制台：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</div><div class="line"><span class="keyword">var</span> password = <span class="keyword">new</span> Buffer(process.env.PASS || <span class="string">'password'</span>);</div><div class="line"><span class="keyword">var</span> decryptStream = crypto.createDecipher(<span class="string">'aes-256-cbc'</span>, password);</div><div class="line"><span class="keyword">var</span> gzip = zlib.createGunzip();</div><div class="line"><span class="keyword">var</span> readStream = fs.createReadStream(__dirname + <span class="string">'/out.gz'</span>);</div><div class="line">readStream <span class="comment">// reads current file</span></div><div class="line">  .pipe(gzip) <span class="comment">// uncompresses</span></div><div class="line">  .pipe(decryptStream) <span class="comment">// decrypts</span></div><div class="line">  .pipe(process.stdout) <span class="comment">// writes to terminal</span></div><div class="line">  .on(<span class="string">'finish'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="comment">// finished</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'done'</span>);</div><div class="line">  });</div></pre></td></tr></table></figure>

<h3 id="资源-2">资源</h3>
<p>想了解更多关于Node基础，可以访问<a href="//webapplog.com/node-js-fundamentals-a-concise-overview-of-the-main-concepts/">这里</a>。更深入的了解数据流，请点击<a href="//github.com/substack/stream-handbook">数据流手册</a>。</p>
<h2 id="错误处理">错误处理</h2>
<p>错误处理是Node最重要的主题之一。如果忽略或者处理不当，你的整个应用将崩溃或处于不一致的状态。</p>
<h3 id="Error-first回调函数">Error-first回调函数</h3>
<p><code>error-first</code>回调函数是Node回调函数的一个标准协议，它起源于Node核心，后来被用户接受同时成为今天的标准。这是个很简单的规定，只有一条规则：回调函数的第一个参数必须是<code>error</code>对象。</p>
<p>这就意味着可能出现两种场景：</p>
<ul>
<li>如果error参数是空，则操作成功。</li>
<li>如果error参数不为空，则报错并需要你的处理</li>
</ul>
<p>让我们看一下我们是如何用Node读取文件内容的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fs.readFile(<span class="string">'/foo.txt'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err, data)</span> </span>{</div><div class="line">  <span class="comment">// ...</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p><code>fs.readFile</code>的回调函数有两个参数：error对象和文件内容。</p>
<p>现在我们来实现一个相似的函数，使得可以读取多个文件的数据，通过一个数组传递参数。特征和之前的一样，只不过把单一文件路径参数改成一个数组：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">readFiles(filesArray, callback);</div></pre></td></tr></table></figure>

<p>我们尊重<code>error-first</code>模式不会在<code>readFiles</code>函数里面处理错误，不过会将这任务转交给回调函数。<code>readFiles</code>函数会遍历文件路径数组，并读取数据。如果遇到错误，它将调用回调函数，有且只调用一次。当完成读取数组里最后一个文件的内容时，将调用回调函数并将<code>null</code>作为第一个参数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFiles</span><span class="params">(files, callback)</span> </span>{</div><div class="line">  <span class="keyword">var</span> filesLeft = files.length;</div><div class="line">  <span class="keyword">var</span> contents = {};</div><div class="line">  <span class="keyword">var</span> error = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">var</span> processContent = <span class="function"><span class="keyword">function</span><span class="params">(filePath)</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(err, data)</span> </span>{</div><div class="line">      <span class="comment">// an error was previously encountered and the callback was invoked</span></div><div class="line">      <span class="keyword">if</span> (error !== <span class="literal">null</span>) { <span class="keyword">return</span>; }</div><div class="line">      <span class="comment">// an error happen while trying to read the file, so invoke the callback</span></div><div class="line">      <span class="keyword">if</span> (err) {</div><div class="line">        error = err;</div><div class="line">        <span class="keyword">return</span> callback(err);</div><div class="line">      }</div><div class="line">      contents[filePath] = data;</div><div class="line">      <span class="comment">// after the last file read was executed, invoke the callback</span></div><div class="line">      <span class="keyword">if</span> (!--filesLeft) {</div><div class="line">        callback(<span class="literal">null</span>, contents);</div><div class="line">      }</div><div class="line">    };</div><div class="line">  };</div><div class="line">  files.forEach(<span class="function"><span class="keyword">function</span><span class="params">(filePath)</span> </span>{</div><div class="line">    fs.readFile(filePath, processContent(filePath));</div><div class="line">  });</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="EventEmitter错误">EventEmitter错误</h3>
<p>我们要小心处理<code>EventEmitter</code>（数据流也一样），因为如果有未处理的错误事件将导致我们的应用崩溃。这是最简单的例子，由我们自己触发错误：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</div><div class="line"><span class="keyword">var</span> emitter = <span class="keyword">new</span> EventEmitter();</div><div class="line">emitter.emit(<span class="string">'error'</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'something bad happened'</span>));</div></pre></td></tr></table></figure>

<p>由你的应用决定，可以是个严重的错误（难以发现）或不会使你的应用崩溃的错误（如失败时发送一个信息）。无论如何都要绑定一个<code>error</code>事件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">emitter.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span><span class="params">(err)</span> </span>{</div><div class="line">  <span class="built_in">console</span>.error(<span class="string">'something went wrong with the ee:'</span> + err.message);</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="用verror模块传递更具描述性的错误">用verror模块传递更具描述性的错误</h3>
<p>有很多种情况是需要我们将错误指派给回调函数。实际上，我们上面写<code>readFiles</code>函数的时候做过这样的事。可是在读取文件的时候发现错误我们只要指派给回调函数吗？</p>
<p>让我们试着读取一个不存在的文件，看看会发生什么：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">readFiles([<span class="string">'non-existing-file'</span>], <span class="function"><span class="keyword">function</span><span class="params">(err, contents)</span> </span>{</div><div class="line">  <span class="keyword">if</span> (err) { <span class="keyword">throw</span> err; }</div><div class="line">  <span class="built_in">console</span>.log(contents);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>上面的例子输出如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ node <span class="built_in">read</span>Files.js</div><div class="line">/Users/alexandruvladutu/www/airpair-article/examples/<span class="built_in">read</span>Files.js:<span class="number">34</span></div><div class="line">  <span class="keyword">if</span> (err) { throw err; }</div><div class="line">                    ^</div><div class="line">Error: ENOENT, open <span class="string">'/Users/alexandruvladutu/www/airpair-article/examples/non-existing-file'</span></div></pre></td></tr></table></figure>

<p>这错误提示并不是那么理想，因为在现实当中的情况可能是一个函数调用另一个函数再调用原来的函数。例如，你或许有个函数叫<code>readMarkdownFiles</code>，它会调用<code>readFiles</code>去读取markdown文件。</p>
<p>上面输出的错误追踪并不是那么的有用，所以你还要深度的挖掘错误的来源。幸运的是我们可以通过整合<code>verror</code>模块到应用中来解决这样的问题。</p>
<p>使用方法就是引入<code>verror</code>模块，在调用回调函数时用<code>verror</code>对象包住我们的<code>error</code>对象并提供更多的错误信息：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> verror = <span class="built_in">require</span>(<span class="string">'verror'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFiles</span><span class="params">(files, callback)</span> </span>{</div><div class="line">  ...</div><div class="line">  <span class="keyword">return</span> callback(<span class="keyword">new</span> VError(err, <span class="string">'failed to read file %s'</span>, filePath));</div><div class="line">  ...</div><div class="line">}</div></pre></td></tr></table></figure>

<p>让我们看看输出结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ node <span class="built_in">read</span>Files-verror.js</div><div class="line">/Users/alexandruvladutu/www/airpair-article/examples/<span class="built_in">read</span>Files-verror.js:<span class="number">35</span></div><div class="line">  <span class="keyword">if</span> (err) { throw err; }</div><div class="line">                    ^</div><div class="line">VError: failed to <span class="built_in">read</span> file /Users/alexandruvladutu/www/airpair-article/examples/non-existing-file: ENOENT, open <span class="string">'/Users/alexandruvladutu/www/airpair-article/examples/non-existing-file'</span></div><div class="line">  at /Users/alexandruvladutu/www/airpair-article/examples/<span class="built_in">read</span>Files-verror.js:<span class="number">17</span>:<span class="number">25</span></div><div class="line">  at fs.js:<span class="number">207</span>:<span class="number">20</span></div><div class="line">  at Object.oncomplete (fs.js:<span class="number">107</span>:<span class="number">15</span>)</div></pre></td></tr></table></figure>

<p>现在我们知道在读取文件上出现错误，并且知道错误来自<code>readFiles</code>函数。</p>
<p>这是一个简单的例子，但展示了<code>verror</code>的强大。在我们的产品中，这个模块是非常有用的，因为代码库可能非常大，错误源可能比我们的例子藏得更深。</p>
<h3 id="资源-3">资源</h3>
<p>想了解更多，可以访问<a href="//www.joyent.com/developers/node/design/errors">这篇文章</a>。</p>
<h2 id="使用node-inspector调试Node应用">使用node-inspector调试Node应用</h2>
<p>很多小的错误我们可以使用<code>console.log</code>去追踪，但是更复杂的错误我们可以使用<a href="//github.com/node-inspector/node-inspector">node-inspector</a>，它有很多很吸引人的特性，但最重要的还是：</p>
<ul>
<li>它是基于Blink开发者工具的，所以它用起来像前端开发工具。</li>
<li>它可以设置断点。</li>
<li>我们能step over、step in、step out和resume(继续)。</li>
<li>我们可以检测作用域、变量、对象属性。</li>
<li>除了检测，我们还能修改变量、对象属性。</li>
</ul>
<p>通过npm安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g node-inspector</div></pre></td></tr></table></figure>

<p>让我们来写个最简单的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> port = process.env.PORT || <span class="number">1337</span>;</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> </span>{</div><div class="line">  res.writeHead(<span class="number">200</span>, { <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span> });</div><div class="line">  res.end(<span class="keyword">new</span> <span class="built_in">Date</span>() + <span class="string">'\n'</span>);</div><div class="line">}).listen(port);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server running on port %s'</span>, port);</div></pre></td></tr></table></figure>

<p>为了调试我们的例子，我们要输入下面这行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># basically `node-debug` instead of `node`</span></div><div class="line">$ node-debug example.js</div></pre></td></tr></table></figure>

<p>这样不仅让我们的应用跑起来，而且还会在Chrome里面打开node-inspector面板。让我们在请求上设置一个断点（通过点击边缘上的数字）。现在让我们打开另一个窗口，访问<a href="//localhost:1337">http://localhost:1337</a>。浏览器会出现加载的状态，但打开node-inspector面板看看：</p>
<p><img src="/img/node/img-2.jpg" alt="node-inspector"></p>
<p>如果你打开console选卡，你能检测<code>request</code>和<code>response</code>对象，还能修改他们等等。这只是node-inspector入门的一个很简单的例子，但在实际运用当中通过这样的调试方式可以解决更复杂的错误问题。</p>
<h3 id="资源-4">资源</h3>
<p>想了解更多关于调试的东西，可以访问<a href="//blog.nodeknockout.com/post/34843655876/debugging-with-node-inspector">这篇文章</a>。</p>
<h2 id="用Express和Socket-IO创建一个实时应用">用Express和Socket.IO创建一个实时应用</h2>
<p><code>Express</code>是Node最流行的框架，且<code>Socket.IO</code>是客户端和服务端双向实时通信的框架。所以我们要用上面两个框架创建一个简单的像素跟踪应用，具有显示板并且可以实时显示访问者。</p>
<p>除了<code>Express</code>和<code>Socket.IO</code>模块，我们还需要安装<code>emptygif</code>模块。当用户访问<a href="//localhost:1337/tpx.gif">http://localhost:1337/tpx.gif</a>，正在访问zh<a href="//localhost:1337/">首页</a>的用户会收到一条信息，这条信息与客户端相关，包括IP地址和浏览器引擎。</p>
<p>下面是<code>server.js</code>文件的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> emptygif = <span class="built_in">require</span>(<span class="string">'emptygif'</span>);</div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(app);</div><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</div><div class="line">app.get(<span class="string">'/tpx.gif'</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res, next)</span> </span>{</div><div class="line">  io.emit(<span class="string">'visit'</span>, {</div><div class="line">    ip: req.ip,</div><div class="line">    ua: req.headers[<span class="string">'user-agent'</span>]</div><div class="line">  });</div><div class="line">  emptygif.sendEmptyGif(req, res, {</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'image/gif'</span>,</div><div class="line">    <span class="string">'Content-Length'</span>: emptygif.emptyGifBufferLength,</div><div class="line">    <span class="string">'Cache-Control'</span>: <span class="string">'public, max-age=0'</span> <span class="comment">// or specify expiry to make sure it will call everytime</span></div><div class="line">  });</div><div class="line">});</div><div class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>));</div><div class="line">server.listen(<span class="number">1337</span>);</div></pre></td></tr></table></figure>

<p>在前端我们只要监听由服务端发出的<code>visit</code>事件，修改相应的UI：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Realtime pixel tracking dashboard<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="class">.visit</span> <span class="rules">{</span></div><div class="line">      <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">5px</span> <span class="number">0</span></span></span>;</div><div class="line">      <span class="rule"><span class="attribute">border-bottom</span>:<span class="value"> <span class="number">1px</span> dotted <span class="hexcolor">#CCC</span></span></span>;</div><div class="line">      <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">5px</span> <span class="number">0</span></span></span>;</div><div class="line">    <span class="rule">}</span></div><div class="line">    <span class="class">.ip</span> <span class="rules">{</span></div><div class="line">      <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> <span class="number">10px</span></span></span>;</div><div class="line">      <span class="rule"><span class="attribute">border-left</span>:<span class="value"> <span class="number">1px</span> dotted <span class="hexcolor">#CCC</span></span></span>;</div><div class="line">      <span class="rule"><span class="attribute">border-right</span>:<span class="value"> <span class="number">1px</span> dotted <span class="hexcolor">#CCC</span></span></span>;</div><div class="line">      <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span></span></span>;</div><div class="line">    <span class="rule">}</span></div><div class="line">  <span class="tag">&lt;/<span class="title">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Realtime pixel tracking dashboard<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"visits"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://code.jquery.com/jquery-1.10.2.min.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.1/moment.min.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/socket.io/socket.io.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  $(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> socket = io();</div><div class="line">    <span class="keyword">var</span> containerEl = $(<span class="string">'.visits'</span>);</div><div class="line">    socket.on(<span class="string">'visit'</span>, <span class="function"><span class="keyword">function</span><span class="params">(visit)</span> </span>{</div><div class="line">      <span class="keyword">var</span> newItem = <span class="string">'&lt;div class="visit"&gt;'</span>;</div><div class="line">          newItem += <span class="string">'&lt;span class="date"&gt;'</span> + moment().format(<span class="string">'MMMM Do YYYY, HH:mm:ss'</span>) + <span class="string">'&lt;/span&gt;'</span>;</div><div class="line">          newItem += <span class="string">'&lt;span class="ip"&gt;'</span> + visit.ip + <span class="string">'&lt;/span&gt;'</span>;</div><div class="line">          newItem += <span class="string">'&lt;span class="ua"&gt;'</span> + visit.ua + <span class="string">'&lt;/span&gt;&lt;/div&gt;'</span>;</div><div class="line">          containerEl.append(newItem);</div><div class="line">    });</div><div class="line">  });</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>现在让我们启动应用程序，打开显示板，用不同的浏览器打开我们的应用，显示如下：</p>
<p><img src="/img/node/img-2.jpg" alt="dashboard"></p>
<h3 id="资源-5">资源</h3>
<p>想了解更多关于Express和Socket.IO，可以点击<a href="//www.digitalocean.com/community/tutorials/how-to-install-express-a-node-js-framework-and-set-up-socket-io-on-a-vps">这个教程</a>。</p>
<h2 id="总结">总结</h2>
<p>Node并不是万能的，但是希望你能在正确的情况下使用。简而言之，对于I/O等待和高并发的应用，Node是一个好的选择。</p>
<p>npm注册量每天都在增长，这说明将会有越来越多的Node模块可以使用。我们不仅学习了如何安装Node，也了解了Node的核心，例如回调函数、事件和数据流。在文章的末尾我们解决了一些实际的问题，例如错误处理、调试和创建了一个实例。</p>
<p>如果你还怀疑Node是否足够成熟，你要知道一些大公司像雅虎、沃尔玛或PayPal正在用它。如果你还有什么问题可以提出来。</p>
<p>原文链接：</p>
<blockquote>
<ul>
<li><a href="http://www.airpair.com/javascript/node-js-tutorial/" target="_blank" rel="external">http://www.airpair.com/javascript/node-js-tutorial/</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="介绍">介绍</h2>
<p>随着Node.js的发展，Javascript应用在这几年突飞猛进的流行。如果你去<a href="//www.modulecounts.com/">modulecounts.com</a>上看看，你会发现Node packages已]]>
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript类型理解与类型判断]]></title>
    <link href="http://yoursite.com/2014/09/29/Javascript%E7%B1%BB%E5%9E%8B%E7%90%86%E8%A7%A3%E4%B8%8E%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <id>http://yoursite.com/2014/09/29/Javascript类型理解与类型判断/</id>
    <published>2014-09-29T05:34:38.000Z</published>
    <updated>2014-11-02T12:00:05.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>理解Javascript的类型是学习Javascript的基础，但是作为新手很容易在判断Javascript上容易混淆，所以在此整理清自己的思路。</p>
<h2 id="类型">类型</h2>
<blockquote>
<p>JavaScript 中所有变量都是对象，除了两个例外 null 和 undefined。</p>
</blockquote>
<p>作为新手很容易被上面这句话误导，首先解释下上面这句话。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="literal">false</span>.toString(); <span class="comment">// 'false'</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].toString(); <span class="comment">// '1,2,3'</span></div><div class="line">(<span class="number">2</span>).toString(); <span class="comment">// '2'</span></div></pre></td></tr></table></figure>

<p>通过上面的代码，可以看出布尔、数组、数字都具有<code>toString()</code>这一方法，其实除了<code>null</code>和<code>undefined</code>外的数据类型都继承自<code>Object</code>对象都具<code>Object</code>的方法和属性，这些看似非对象的类型使用起来却很像对象，所以也可以说它们都是对象。可是Javascript依然具有类型，我想大致可以分成下面几类：</p>
<ul>
<li>Number</li>
<li>String</li>
<li>Boolean</li>
<li>Object</li>
<li>Null</li>
<li>Undefined</li>
</ul>
<p><code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Null</code>、<code>Undefined</code>都是是基本数据类型，只有<code>Object</code>属于复杂数据类型。<code>Null</code>和<code>Undefined</code>都表示空，它们的区别在于：<code>Null</code>表示无值，一般是人为的将变量的值设置为<code>null</code>；<code>Undefined</code>表示未知值，一般在使用var声明变量但未对其加以初始化时，这个变量值为<code>undefined</code>。</p>
<p><code>Object</code>又分为以下几种类型：</p>
<ul>
<li>Object<ul>
<li>Function</li>
<li>Array</li>
<li>Date</li>
<li>RegExp</li>
</ul>
</li>
</ul>
<h2 id="typeof操作符">typeof操作符</h2>
<p><code>typeof</code>操作符（和<code>instanceof</code>一起）或许是 JavaScript 中最大的设计缺陷， 因为几乎不可能从它们那里得到想要的结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> []; <span class="comment">// object</span></div><div class="line"><span class="keyword">typeof</span> {}; <span class="comment">// object</span></div><div class="line"><span class="keyword">typeof</span> <span class="string">''</span>; <span class="comment">// string</span></div><div class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Date</span>() <span class="comment">// object</span></div><div class="line"><span class="keyword">typeof</span> <span class="number">1</span>; <span class="comment">// number</span></div><div class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{}; <span class="comment">// function</span></div><div class="line"><span class="keyword">typeof</span> /test/i; <span class="comment">// object</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">true</span>; <span class="comment">// boolean</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// object</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">// undefined</span></div></pre></td></tr></table></figure>

<p>为什么？<code>function</code>明明是<code>Object</code>类型，却显示<code>function</code>；<code>null</code>明明是<code>Null</code>类型，却显示’object’。所以<code>typeof</code>操作符对类型的判断是不靠谱的，除非类型在给定的范围且<code>typeof</code>确实能够区分这些类型。</p>
<h2 id="类型的区分">类型的区分</h2>
<p>Javascript标准标准文档给出了区分类型的办法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.toString.call();</div></pre></td></tr></table></figure>

<p>我们来看看上面的方法效果如何：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.toString.call([]); <span class="comment">// [object Array]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call({}); <span class="comment">// [object Object]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>); <span class="comment">// [object String]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// [object Date]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>); <span class="comment">// [object Number]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{}); <span class="comment">// [object Function]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/test/i</span>); <span class="comment">// [object RegExp]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>); <span class="comment">// [object Boolean]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>); <span class="comment">// [object Null]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(); <span class="comment">// [object Undefined]</span></div></pre></td></tr></table></figure>

<p>效果确实比<code>typeof</code>操作符号不一样，那我们在判断的时候就可以这么使用了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getType = <span class="function"><span class="keyword">function</span> <span class="params">(elem)</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(elem);</div><div class="line">    },</div><div class="line">    person = {};</div><div class="line">    person.getName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Jason'</span>;</div><div class="line">    };</div><div class="line"><span class="keyword">if</span> (getType(person) === <span class="string">'[object Object]'</span>) {</div><div class="line">  person.getName();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>可是这样还不够完美，因为<code>Object.prototype.toString.call()</code>返回值是字符串所以可以用<code>.slice(8, -1)</code>方法去掉<code>[object</code>和<code>]</code>。所以我们再改进一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getType = <span class="function"><span class="keyword">function</span> <span class="params">(elem)</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(elem).slice(<span class="number">8</span>, -<span class="number">1</span>);</div><div class="line">    },</div><div class="line">    person = {};</div><div class="line">    person.getName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Jason'</span>;</div><div class="line">    };</div><div class="line"><span class="keyword">if</span> (getType(person) === <span class="string">'Object'</span>) {</div><div class="line">  person.getName();</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="写个类库">写个类库</h2>
<p>利用上面判断类型的方法可以写个类库，此类库来自(Axis.js)[//github.com/toddmotto/axis]:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="params">(root, factory)</span> </span>{</div><div class="line">  <span class="comment">// 判断是否使用了模块</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> && define.amd) {</div><div class="line">    <span class="comment">// 使用AMD模块</span></div><div class="line">    define(factory);</div><div class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) {</div><div class="line">    <span class="comment">// 使用CMD模块</span></div><div class="line">    <span class="built_in">module</span>.exports = factory;</div><div class="line">  } <span class="keyword">else</span> {</div><div class="line">    <span class="comment">// 没有使用模块，放在全局下</span></div><div class="line">    root.axis = factory();</div><div class="line">  }</div><div class="line">})(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// 严格模式</span></div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  <span class="keyword">var</span> exports = {};</div><div class="line">  <span class="comment">// 将字符串转为数组</span></div><div class="line">  <span class="keyword">var</span> types = <span class="string">'Array Object String Date RegExp Function Boolean Number Null Undefined'</span>.split(<span class="string">' '</span>);</div><div class="line">  <span class="comment">// 判断类型</span></div><div class="line">  <span class="keyword">var</span> type = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">this</span>).slice(<span class="number">8</span>, -<span class="number">1</span>);</div><div class="line">  };</div><div class="line">  <span class="comment">// 遍历types，为exports对象添加isArray、isObject...等方法</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = types.length; i--;) {</div><div class="line">    exports[<span class="string">'is'</span> + types[i]] = (<span class="function"><span class="keyword">function</span> <span class="params">(self)</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(elem)</span> </span>{</div><div class="line">        <span class="comment">// type.call(elem)将type方法里的this指针指向elem</span></div><div class="line">        <span class="keyword">return</span> type.call(elem) === self;</div><div class="line">      };</div><div class="line">    })(types[i]);</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> exports;</div><div class="line">});</div></pre></td></tr></table></figure>

<p>使用方法也很简单：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">axis.isArray([]); <span class="comment">// true</span></div><div class="line">axis.isObject({}); <span class="comment">// true</span></div><div class="line">axis.isString(<span class="string">''</span>); <span class="comment">// true</span></div><div class="line">axis.isDate(<span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// true</span></div><div class="line">axis.isRegExp(<span class="regexp">/test/i</span>); <span class="comment">// true</span></div><div class="line">axis.isFunction(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{}); <span class="comment">// true</span></div><div class="line">axis.isBoolean(<span class="literal">true</span>); <span class="comment">// true</span></div><div class="line">axis.isNumber(<span class="number">1</span>); <span class="comment">// true</span></div><div class="line">axis.isNull(<span class="literal">null</span>); <span class="comment">// true</span></div><div class="line">axis.isUndefined(); <span class="comment">// true</span></div></pre></td></tr></table></figure>

<blockquote>
<p> 参考链接：</p>
<ul>
<li><a href="http://toddmotto.com/understanding-javascript-types-and-reliable-type-checking/" target="_blank" rel="external">http://toddmotto.com/understanding-javascript-types-and-reliable-type-checking/</a></li>
<li><a href="http://bonsaiden.github.io/JavaScript-Garden/" target="_blank" rel="external">http://bonsaiden.github.io/JavaScript-Garden/</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2>
<p>理解Javascript的类型是学习Javascript的基础，但是作为新手很容易在判断Javascript上容易混淆，所以在此整理清自己的思路。</p>
<h2 id="类型">类型</h2>
<blockquote>
<p>Jav]]>
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[清除浮动的几种实现方式]]></title>
    <link href="http://yoursite.com/2014/09/23/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2014/09/23/清除浮动的几种实现方式/</id>
    <published>2014-09-23T13:31:24.000Z</published>
    <updated>2015-01-26T14:50:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p><code>float: left</code>会使元素脱离文档流，不占据文档流的空间。如果子元素使用<code>float: left</code>，父元素不做相关的处理的话，父元素就没法包裹住子元素。之前习惯在父元素上加<code>overflow: hidden</code>来处理这个问题，可是会有局限性，当子元素超出父元素的话，超出部分就会被隐藏，所以说清除浮动这谭水很深。</p>
<h2 id="丑陋的实现方式">丑陋的实现方式</h2>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">br</span> <span class="attribute">class</span>=<span class="value">"cb"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p><strong>css</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class">.child</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">50px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">_display</span>:<span class="value"> inline</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.cb</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>最丑陋的实现方式就是在子元素后再加一个用于清除浮动的<code>br</code>元素，写个专门清除浮动的<code>.cb</code>类加在它上面。上面的例子也可使用<code>clear: left</code>清除左浮动，为了方便才使用<code>clear: both</code>，最后不要忘了加上<code>_display: inline</code>兼容IE6。</p>
<h2 id="父亲元素浮动的实现方式">父亲元素浮动的实现方式</h2>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p><strong>css</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class">.parent</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.child</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>只要父元素也跟着浮动的话，也可以达到效果。可是这样会影响后面元素的定位，而且有些时候父元素是定位死的，无法变成浮动。</p>
<h2 id="overflow实现方式">overflow实现方式</h2>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p><strong>css</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class">.parent</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">zoom</span>:<span class="value"> <span class="number">1</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.child</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">50px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>在父元素上使用<code>overflow: hidden</code>可以达到清除浮动的效果，也可以是<code>overflow: auto</code>。可是通过overflow实现的清除浮动都有一个缺点，当子元素超出了父元素，父元素使用<code>overflow: hidden</code>的话，子元素超出的部分会被隐藏；使用<code>overflow: auto</code>的话，父元素上会出现滚动条，最后也别忘加上<code>zoom: 1</code>触发IE的hasLayout。</p>
<h2 id="display:inline-block的实现方式">display:inline-block的实现方式</h2>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p><strong>css</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class">.parent</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">0px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.child</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</div><div class="line">  <span class="rule">*<span class="attribute">display</span>:<span class="value"> inline</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">zoom</span>:<span class="value"> <span class="number">1</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>其实换个角度想想也可以不使用float来实现效果，那就是用<code>display: inline-block</code>，使得块级元素具有行内元素的特性。IE8以下不支持这个属性，但是有解决的方案就是加上<code>*display: inline; zoom: 1;</code>。为什么要加<code>font-size: 0px</code>?消除现代浏览器上出现的间距，但是在子元素上要重置<code>font-size</code>，除此之外还可以改变html代码缩进，去掉换行，写成一行。</p>
<h2 id="用于现代浏览器的实现方式">用于现代浏览器的实现方式</h2>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p><strong>css</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class">.parent</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> -webkit-flex</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> -ms-flex</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-webkit-flex-flow</span>:<span class="value"> row wrap</span></span>;</div><div class="line">      <span class="rule"><span class="attribute">-ms-flex-flow</span>:<span class="value"> row wrap</span></span>;</div><div class="line">          <span class="rule"><span class="attribute">flex-flow</span>:<span class="value"> row wrap</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.child</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>这种用于现代浏览器的实现方式更加灵活了，可是不支持IE10以下的浏览器，<code>flex-flow</code>的两个值分别表示<code>flex-direction</code>（横向还是纵向）、<code>flex-wrap</code>（是否换行），上面的例子是横向多行排列。除此之外还很支持很多属性，想了解更多可以看<a href="//dev.opera.com/articles/flexbox-basics/">这篇文章</a>。</p>
<h2 id=":after伪元素的实现方式">:after伪元素的实现方式</h2>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p><strong>css</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class">.parent</span><span class="pseudo">:after</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">""</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> table</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.child</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">50px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>或者</p>
<p><strong>css</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class">.parent</span><span class="pseudo">:before</span>,</div><div class="line"><span class="class">.parent</span><span class="pseudo">:after</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">"."</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.parent</span><span class="pseudo">:after</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.parent</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">zoom</span>:<span class="value"> <span class="number">1</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.child</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">50px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>这种方式原理利用<code>:after</code>伪元素，实现在父元素内容后面清除浮动的效果。</p>
<h2 id="最佳实现方式">最佳实现方式</h2>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p><strong>css</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class">.parent</span><span class="pseudo">:before</span>,</div><div class="line"><span class="class">.parent</span><span class="pseudo">:after</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">""</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> table</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.parent</span><span class="pseudo">:after</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.parent</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">zoom</span>:<span class="value"> <span class="number">1</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.child</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">50px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>这个是现在最广泛被接受做法，作者是<a href="//nicolasgallagher.com/">Nicolas Gallagher</a>，是前一种方式的改进版。</p>
<h2 id="网格布局">网格布局</h2>
<p>利用清除浮动，我们可以自己开发一个简易的网格布局。</p>
<p><strong>css</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">*,</div><div class="line">*<span class="pseudo">:before</span>,</div><div class="line">*<span class="pseudo">:after</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line">     <span class="rule"><span class="attribute">-moz-box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line">          <span class="rule"><span class="attribute">box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.row</span><span class="pseudo">:before</span>,</div><div class="line"><span class="class">.row</span><span class="pseudo">:after</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">""</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> table</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.row</span><span class="pseudo">:after</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.row</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">zoom</span>:<span class="value"> <span class="number">1</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.col-1</span>,</div><div class="line"><span class="class">.col-2</span>,</div><div class="line"><span class="class">.col-3</span>,</div><div class="line"><span class="class">.col-4</span>,</div><div class="line"><span class="class">.col-5</span>,</div><div class="line"><span class="class">.col-6</span>,</div><div class="line"><span class="class">.col-7</span>,</div><div class="line"><span class="class">.col-8</span>,</div><div class="line"><span class="class">.col-9</span>,</div><div class="line"><span class="class">.col-10</span>,</div><div class="line"><span class="class">.col-11</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.col-1</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">8.333333333333332%</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.col-2</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">16.666666666666664%</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.col-3</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.col-4</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">33.33333333333333%</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.col-5</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">41.66666666666667%</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.col-6</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.col-7</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">58.333333333333336%</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.col-8</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">66.66666666666666%</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.col-9</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">75%</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.col-10</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">83.33333333333334%</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.col-11</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">91.66666666666666%</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.col-12</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>使用方法</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-10"</span>&gt;</span></div><div class="line">    ...</div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-2"</span>&gt;</span></div><div class="line">    ...</div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p>首先利用<code>box-sizing: border-box</code>,将盒子模型设置成IE盒子模型，然后子元素都<code>float: left</code>，按照百分比去设置宽度，父元素使用清除浮动。使用的时候注意<code>col-X</code>数字加起来要等于12就可以了。</p>
<blockquote>
<p> 参考链接：</p>
<ul>
<li><a href="http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best" target="_blank" rel="external">http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best</a></li>
<li><a href="https://dev.opera.com/articles/flexbox-basics/" target="_blank" rel="external">https://dev.opera.com/articles/flexbox-basics/</a></li>
<li><a href="http://www.cssmojo.com/latest_new_clearfix_so_far/" target="_blank" rel="external">http://www.cssmojo.com/latest_new_clearfix_so_far/</a></li>
<li><a href="http://nicolasgallagher.com/micro-clearfix-hack/" target="_blank" rel="external">http://nicolasgallagher.com/micro-clearfix-hack/</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2009/04/float_clearing.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2009/04/float_clearing.html</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2>
<p><code>float: left</code>会使元素脱离文档流，不占据文档流的空间。如果子元素使用<code>float: left</code>，父元素不做相关的处理的话，父元素就没法包裹住子元素。之前习惯在父元素上加<code]]>
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gulp入门教程]]></title>
    <link href="http://yoursite.com/2014/09/17/Gulp%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2014/09/17/Gulp入门教程/</id>
    <published>2014-09-16T16:34:58.000Z</published>
    <updated>2015-01-26T14:50:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>最近流行前端构建工具，苦于之前使用Grunt，代码很难阅读，现在出了Gulp，真是摆脱了痛苦。发现了一篇很好的Gulp英文教程，整理翻译给大家看看。</p>
<h2 id="为什么使用Gulp">为什么使用Gulp</h2>
<p>Gulp基于Node.js的前端构建工具，通过Gulp的插件可以实现前端代码的编译（sass、less）、压缩、测试；图片的压缩；浏览器自动刷新，还有许多强大的插件可以在<a href="//gulpjs.com/plugins/">这里</a>查找。比起Grunt不仅配置简单而且更容易阅读和维护，我们可以做一个对比：</p>
<h3 id="Grunt:">Grunt:</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">sass: {</div><div class="line">  dist: {</div><div class="line">    options: {</div><div class="line">      style: <span class="string">'expanded'</span></div><div class="line">    },</div><div class="line">    files: {</div><div class="line">      <span class="string">'dist/assets/css/main.css'</span>: <span class="string">'src/styles/main.scss'</span>,</div><div class="line">    }</div><div class="line">  }</div><div class="line">},</div><div class="line">autoprefixer: {</div><div class="line">  dist: {</div><div class="line">    options: {</div><div class="line">      browsers: [</div><div class="line">        <span class="string">'last 2 version'</span>, <span class="string">'safari 5'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 9'</span>, <span class="string">'opera 12.1'</span>, <span class="string">'ios 6'</span>, <span class="string">'android 4'</span></div><div class="line">      ]</div><div class="line">    },</div><div class="line">    src: <span class="string">'dist/assets/css/main.css'</span>,</div><div class="line">    dest: <span class="string">'dist/assets/css/main.css'</span></div><div class="line">  }</div><div class="line">},</div><div class="line">grunt.registerTask(<span class="string">'styles'</span>, [<span class="string">'sass'</span>, <span class="string">'autoprefixer'</span>]);</div></pre></td></tr></table></figure>

<p>在Grunt里面，每个插件使用的方式相对独立，正如上面的代码通过sass插件将main.sass文件编译成main.css文件，接着autoprefixer插件再对编译好的main.css文件进行修改，最后覆盖main.css。那么覆盖文件就是多余的了，有没办法做到sass和autoprefixer一并处理完再生成main.css？我们来看看Gulp是如何做到的：</p>
<h3 id="Gulp：">Gulp：</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/styles/main.scss'</span>)</div><div class="line">    .pipe(sass({ style: <span class="string">'compressed'</span> }))</div><div class="line">    .pipe(autoprefixer(<span class="string">'last 2 version'</span>, <span class="string">'safari 5'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 9'</span>, <span class="string">'opera 12.1'</span>, <span class="string">'ios 6'</span>, <span class="string">'android 4'</span>))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/assets/css'</span>))</div><div class="line">});</div></pre></td></tr></table></figure>

<p>使用Gulp我们只需要放一个路径，通过管道方式使用插件，最后生成文件，是不是有种jQuery的感觉。这种方式不仅提高效率而且一眼就看清了输入文件和输出文件，再也不用看gruntfile看得眼花缭乱了。</p>
<p>再打个比喻，Grunt的插件就像独立的工厂，这个工厂生成出来的产品打包封装好后再送到另一个工厂去加工，使用了Gulp后实现了工厂的合并，所有东西都在一个工厂里完成了。现在是否对Gulp感兴趣了，那就开始使用Gulp吧！</p>
<h2 id="安装">安装</h2>
<p>首先我们要全局安装一遍：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp -g</div></pre></td></tr></table></figure>

<p>接着我们要进去到项目的根目录再安装一遍（确保你根目录存在package.json文件）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp --save-dev</div></pre></td></tr></table></figure>

<p>—save-dev这个属性会将条目保存到你package.json的devDependencies里面</p>
<h2 id="安装Gulp插件">安装Gulp插件</h2>
<p>我们将要使用Gulp插件来完成我们以下任务：</p>
<ul>
<li>sass的编译（<a href="//github.com/sindresorhus/gulp-ruby-sass">gulp-ruby-sass</a>）</li>
<li>自动添加css前缀（<a href="//github.com/Metrime/gulp-autoprefixer">gulp-autoprefixer</a>）</li>
<li>压缩css（<a href="//github.com/jonathanepollack/gulp-minify-css">gulp-minify-css</a>）</li>
<li>js代码校验（<a href="//github.com/spenceralger/gulp-jshint">gulp-jshint</a>）</li>
<li>合并js文件（<a href="//github.com/wearefractal/gulp-concat">gulp-concat</a>）</li>
<li>压缩js代码（<a href="//github.com/terinjokes/gulp-uglify">gulp-uglify</a>）</li>
<li>压缩图片（<a href="//github.com/sindresorhus/gulp-imagemin">gulp-imagemin</a>）</li>
<li>自动刷新页面（<a href="//github.com/vohof/gulp-livereload">gulp-livereload</a>）</li>
<li>图片缓存，只有图片替换了才压缩（<a href="//github.com/jgable/gulp-cache">gulp-cache</a>）</li>
<li>更改提醒（<a href="//github.com/mikaelbr/gulp-notify">gulp-notify</a>）</li>
<li>清除文件（<a href="//www.npmjs.org/package/del">del</a>）</li>
</ul>
<p>安装这些插件需要运行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del --save-dev</div></pre></td></tr></table></figure>

<p>上面是一些常用的插件，如果想要找更多的插件点击<a href="//gratimax.net/search-gulp-plugins/">这里</a></p>
<h2 id="加载插件">加载插件</h2>
<p>接着我们要创建一个gulpfile.js在根目录下，然后在里面加载插件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    sass = <span class="built_in">require</span>(<span class="string">'gulp-ruby-sass'</span>),</div><div class="line">    autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>),</div><div class="line">    minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>),</div><div class="line">    jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</div><div class="line">    imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>),</div><div class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</div><div class="line">    concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>),</div><div class="line">    notify = <span class="built_in">require</span>(<span class="string">'gulp-notify'</span>),</div><div class="line">    cache = <span class="built_in">require</span>(<span class="string">'gulp-cache'</span>),</div><div class="line">    livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>),</div><div class="line">    del = <span class="built_in">require</span>(<span class="string">'del'</span>);</div></pre></td></tr></table></figure>

<p>Gulp的插件和Grunt有些许不一样，Grunt插件是为了更好的完成一项任务。就像Grunt的<code>imagemin</code>插件就利用了缓存来避免重复压缩，而Gulp要利用<code>gulp-cache</code>来完成，当然啦，不仅限定于缓存图片。</p>
<h2 id="建立任务">建立任务</h2>
<h3 id="编译sass、自动添加css前缀和压缩">编译sass、自动添加css前缀和压缩</h3>
<p>首先我们编译sass，添加前缀，保存到我们指定的目录下面，还没结束，我们还要压缩，给文件添加<code>.min</code>后缀再输出压缩文件到指定目录，最后提醒任务完成了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'styles'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/styles/main.scss'</span>)</div><div class="line">    .pipe(sass({ style: <span class="string">'expanded'</span> }))</div><div class="line">    .pipe(autoprefixer(<span class="string">'last 2 version'</span>, <span class="string">'safari 5'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 9'</span>, <span class="string">'opera 12.1'</span>, <span class="string">'ios 6'</span>, <span class="string">'android 4'</span>))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/assets/css'</span>))</div><div class="line">    .pipe(rename({suffix: <span class="string">'.min'</span>}))</div><div class="line">    .pipe(minifycss())</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/assets/css'</span>))</div><div class="line">    .pipe(notify({ message: <span class="string">'Styles task complete'</span> }));</div><div class="line">});</div></pre></td></tr></table></figure>

<p>让我解释一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'styles'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{...});</div></pre></td></tr></table></figure>

<p><code>gulp.task</code>这个API用来创建任务，在命令行下可以输入<code>$ gulp styles</code>来执行上面的任务。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> gulp.src(<span class="string">'src/styles/main.scss'</span>)</div></pre></td></tr></table></figure>

<p><code>gulp.src</code>这个API设置需要处理的文件的路径，可以是多个文件以数组的形式<code>[main.scss, vender.scss]</code>，也可以是正则表达式<code>/**/*.scss</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.pipe(sass({ style: <span class="string">'expanded'</span> }))</div></pre></td></tr></table></figure>

<p>我们使用<code>.pipe()</code>这个API将需要处理的文件导向sass插件，那些插件的用法可以在github上找到，为了方便大家查找我已经在上面列出来了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.pipe(gulp.dest(<span class="string">'dist/assets/css'</span>));</div></pre></td></tr></table></figure>

<p><code>gulp.dest()</code>API设置生成文件的路径，一个任务可以有多个生成路径，一个可以输出未压缩的版本，另一个可以输出压缩后的版本。</p>
<p>为了更好的了解Gulp API，强烈建议看一下<a href="//github.com/gulpjs/gulp/blob/master/docs/API.md">Gulp API文档</a>，其实Gulp API就这么几个，没什么好可怕的。</p>
<h3 id="js代码校验、合并和压缩">js代码校验、合并和压缩</h3>
<p>希望大家已经知道如何去创建一个任务了，接下来我们完成scripts的校验、合并和压缩的任务吧：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/scripts/**/*.js'</span>)</div><div class="line">    .pipe(jshint(<span class="string">'.jshintrc'</span>))</div><div class="line">    .pipe(jshint.reporter(<span class="string">'default'</span>))</div><div class="line">    .pipe(concat(<span class="string">'main.js'</span>))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/assets/js'</span>))</div><div class="line">    .pipe(rename({suffix: <span class="string">'.min'</span>}))</div><div class="line">    .pipe(uglify())</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/assets/js'</span>))</div><div class="line">    .pipe(notify({ message: <span class="string">'Scripts task complete'</span> }));</div><div class="line">});</div></pre></td></tr></table></figure>

<p>需要提醒的是我们要设置JSHint的reporter方式，上面使用的是default默认的，了解更多点击<a href="//www.jshint.com/docs/reporters/">这里</a>。</p>
<h3 id="压缩图片">压缩图片</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/images/**/*'</span>)</div><div class="line">    .pipe(imagemin({ optimizationLevel: <span class="number">3</span>, progressive: <span class="literal">true</span>, interlaced: <span class="literal">true</span> }))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/assets/img'</span>))</div><div class="line">    .pipe(notify({ message: <span class="string">'Images task complete'</span> }));</div><div class="line">});</div></pre></td></tr></table></figure>

<p>这个任务使用<code>imagemin</code>插件把所有在<code>src/images/</code>目录以及其子目录下的所有图片（文件）进行压缩，我们可以进一步优化，利用缓存保存已经压缩过的图片，使用之前装过的<a href="//github.com/jgable/gulp-cache">gulp-cache</a>插件，不过要修改一下上面的代码：</p>
<p>将这行代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.pipe(imagemin({ optimizationLevel: <span class="number">3</span>, progressive: <span class="literal">true</span>, interlaced: <span class="literal">true</span> }))</div></pre></td></tr></table></figure>

<p>修改成:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.pipe(cache(imagemin({ optimizationLevel: <span class="number">5</span>, progressive: <span class="literal">true</span>, interlaced: <span class="literal">true</span> })))</div></pre></td></tr></table></figure>

<p>现在，只有新建或者修改过的图片才会被压缩了。</p>
<h3 id="清除文件">清除文件</h3>
<p>在任务执行前，最好先清除之前生成的文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span><span class="params">(cb)</span> </span>{</div><div class="line">    del([<span class="string">'dist/assets/css'</span>, <span class="string">'dist/assets/js'</span>, <span class="string">'dist/assets/img'</span>], cb)</div><div class="line">});</div></pre></td></tr></table></figure>

<p>在这里没有必要使用Gulp插件了，可以使用NPM提供的插件。我们用一个回调函数（<code>cb</code>）确保在退出前完成任务。</p>
<h3 id="设置默认任务（default）">设置默认任务（default）</h3>
<p>我们在命令行下输入<code>$ gulp</code>执行的就是默认任务，现在我们为默认任务指定执行上面写好的三个任务：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    gulp.start(<span class="string">'styles'</span>, <span class="string">'scripts'</span>, <span class="string">'images'</span>);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>在这个例子里面，clean任务执行完成了才会去运行其他的任务，在<code>gulp.start()</code>里的任务执行的顺序是不确定的，所以将要在它们之前执行的任务写在数组里面。</p>
<h3 id="监听文件">监听文件</h3>
<p>为了监听文件的是否修改以便执行相应的任务，我们需要创建一个新的任务，然后利用<code>gulp.watch</code>API实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// Watch .scss files</span></div><div class="line">  gulp.watch(<span class="string">'src/styles/**/*.scss'</span>, [<span class="string">'styles'</span>]);</div><div class="line">  <span class="comment">// Watch .js files</span></div><div class="line">  gulp.watch(<span class="string">'src/scripts/**/*.js'</span>, [<span class="string">'scripts'</span>]);</div><div class="line">  <span class="comment">// Watch image files</span></div><div class="line">  gulp.watch(<span class="string">'src/images/**/*'</span>, [<span class="string">'images'</span>]);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>我们将不同类型的文件分开处理，执行对应的数组里的任务。现在我们可以在命令行输入<code>$ gulp watch</code>执行监听任务，当<code>.sass</code>、<code>.js</code>和图片修改时将执行对应的任务。</p>
<h3 id="自动刷新页面">自动刷新页面</h3>
<p>Gulp也可以实现当文件修改时自动刷新页面，我们要修改<code>watch</code>任务，配置LiveReload：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// Create LiveReload server</span></div><div class="line">  livereload.listen();</div><div class="line">  <span class="comment">// Watch any files in dist/, reload on change</span></div><div class="line">  gulp.watch([<span class="string">'dist/**'</span>]).on(<span class="string">'change'</span>, livereload.changed);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>要使这个能够工作，还需要在浏览器上安装LiveReload插件，除此之外还能<a href="//feedback.livereload.com/knowledgebase/articles/86180-how-do-i-add-the-script-tag-manually-">这样做</a></p>
<h3 id="所有任务放一起">所有任务放一起</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*!</span></div><div class="line"> * gulp</div><div class="line"> * $ npm install gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del --save-dev</div><div class="line"> */</div><div class="line"><span class="comment">// Load plugins</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    sass = <span class="built_in">require</span>(<span class="string">'gulp-ruby-sass'</span>),</div><div class="line">    autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>),</div><div class="line">    minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>),</div><div class="line">    jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</div><div class="line">    imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>),</div><div class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</div><div class="line">    concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>),</div><div class="line">    notify = <span class="built_in">require</span>(<span class="string">'gulp-notify'</span>),</div><div class="line">    cache = <span class="built_in">require</span>(<span class="string">'gulp-cache'</span>),</div><div class="line">    livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>),</div><div class="line">    del = <span class="built_in">require</span>(<span class="string">'del'</span>);</div><div class="line"><span class="comment">// Styles</span></div><div class="line">gulp.task(<span class="string">'styles'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/styles/main.scss'</span>)</div><div class="line">    .pipe(sass({ style: <span class="string">'expanded'</span>, }))</div><div class="line">    .pipe(autoprefixer(<span class="string">'last 2 version'</span>, <span class="string">'safari 5'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 9'</span>, <span class="string">'opera 12.1'</span>, <span class="string">'ios 6'</span>, <span class="string">'android 4'</span>))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/styles'</span>))</div><div class="line">    .pipe(rename({ suffix: <span class="string">'.min'</span> }))</div><div class="line">    .pipe(minifycss())</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/styles'</span>))</div><div class="line">    .pipe(notify({ message: <span class="string">'Styles task complete'</span> }));</div><div class="line">});</div><div class="line"><span class="comment">// Scripts</span></div><div class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/scripts/**/*.js'</span>)</div><div class="line">    .pipe(jshint(<span class="string">'.jshintrc'</span>))</div><div class="line">    .pipe(jshint.reporter(<span class="string">'default'</span>))</div><div class="line">    .pipe(concat(<span class="string">'main.js'</span>))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/scripts'</span>))</div><div class="line">    .pipe(rename({ suffix: <span class="string">'.min'</span> }))</div><div class="line">    .pipe(uglify())</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/scripts'</span>))</div><div class="line">    .pipe(notify({ message: <span class="string">'Scripts task complete'</span> }));</div><div class="line">});</div><div class="line"><span class="comment">// Images</span></div><div class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/images/**/*'</span>)</div><div class="line">    .pipe(cache(imagemin({ optimizationLevel: <span class="number">3</span>, progressive: <span class="literal">true</span>, interlaced: <span class="literal">true</span> })))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/images'</span>))</div><div class="line">    .pipe(notify({ message: <span class="string">'Images task complete'</span> }));</div><div class="line">});</div><div class="line"><span class="comment">// Clean</span></div><div class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span><span class="params">(cb)</span> </span>{</div><div class="line">    del([<span class="string">'dist/assets/css'</span>, <span class="string">'dist/assets/js'</span>, <span class="string">'dist/assets/img'</span>], cb)</div><div class="line">});</div><div class="line"><span class="comment">// Default task</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    gulp.start(<span class="string">'styles'</span>, <span class="string">'scripts'</span>, <span class="string">'images'</span>);</div><div class="line">});</div><div class="line"><span class="comment">// Watch</span></div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// Watch .scss files</span></div><div class="line">  gulp.watch(<span class="string">'src/styles/**/*.scss'</span>, [<span class="string">'styles'</span>]);</div><div class="line">  <span class="comment">// Watch .js files</span></div><div class="line">  gulp.watch(<span class="string">'src/scripts/**/*.js'</span>, [<span class="string">'scripts'</span>]);</div><div class="line">  <span class="comment">// Watch image files</span></div><div class="line">  gulp.watch(<span class="string">'src/images/**/*'</span>, [<span class="string">'images'</span>]);</div><div class="line">  <span class="comment">// Create LiveReload server</span></div><div class="line">  livereload.listen();</div><div class="line">  <span class="comment">// Watch any files in dist/, reload on change</span></div><div class="line">  gulp.watch([<span class="string">'dist/**'</span>]).on(<span class="string">'change'</span>, livereload.changed);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>在<a href="//gist.github.com/markgoodyear/8497946#file-gruntfile-js">gist</a>上有源码，并且附上Grunt的实现作为对比。</p>
<blockquote>
<p>参考链接：<a href="http://markgoodyear.com/2014/01/getting-started-with-gulp/" target="_blank" rel="external">http://markgoodyear.com/2014/01/getting-started-with-gulp/</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2>
<p>最近流行前端构建工具，苦于之前使用Grunt，代码很难阅读，现在出了Gulp，真是摆脱了痛苦。发现了一篇很好的Gulp英文教程，整理翻译给大家看看。</p>
<h2 id="为什么使用Gulp">为什么使用Gulp</h2>
<p>G]]>
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="Gulp" scheme="http://yoursite.com/tags/Gulp/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
</feed>
